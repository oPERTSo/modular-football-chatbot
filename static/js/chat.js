const chatMessages = document.getElementById('chatMessages');
const messageInput = document.getElementById('messageInput');
const sendButton = document.getElementById('sendButton');
const loadingMessage = document.getElementById('loadingMessage');
let isWelcomeShown = true;

function scrollToBottom() {
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

function hideWelcome() {
    if (isWelcomeShown) {
        const welcomeMessage = document.querySelector('.welcome-message');
        if (welcomeMessage) {
            welcomeMessage.style.display = 'none';
            isWelcomeShown = false;
        }
    }
}

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏°‡πà‡∏Ç‡∏∂‡πâ‡∏ô
function handleTeamLogos() {
    const teamLogos = document.querySelectorAll('.team-logo');
    teamLogos.forEach(logo => {
        logo.addEventListener('error', function() {
            console.log('Logo failed to load:', this.src);
            this.style.display = 'none';
        });
        
        logo.addEventListener('load', function() {
            console.log('Logo loaded successfully:', this.src);
        });
    });
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà
function addMessage(content, isUser = false) {
    hideWelcome();
    
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isUser ? 'message-user' : 'message-bot'}`;
    
    const avatar = isUser ? 'üë§' : 'ü§ñ';
    const messageHTML = `
        <div class="message-avatar">${avatar}</div>
        <div class="message-content">${content}</div>
    `;
    
    messageDiv.innerHTML = messageHTML;
    chatMessages.appendChild(messageDiv);
    
    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏° DOM element
    setTimeout(() => {
        handleTeamLogos();
    }, 100);
    
    scrollToBottom();
}

function showLoading() {
    loadingMessage.style.display = 'block';
    scrollToBottom();
}

function hideLoading() {
    loadingMessage.style.display = 'none';
}

async function sendMessage(event) {
    event.preventDefault();
    
    const message = messageInput.value.trim();
    if (!message) return;

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    addMessage(message, true);
    messageInput.value = '';
    sendButton.disabled = true;
    showLoading();

    try {
        const response = await fetch('/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ prompt: message })
        });

        const data = await response.json();
        
        hideLoading();
        
        if (response.ok) {
            let formattedResponse = data.response || data.message || '‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ';
            
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô HTML ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (formattedResponse.includes('<!DOCTYPE html>') || formattedResponse.includes('<html>')) {
                // ‡πÄ‡∏õ‡πá‡∏ô HTML ‡πÄ‡∏ï‡πá‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö - ‡πÅ‡∏¢‡∏Å‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô body
                const parser = new DOMParser();
                const doc = parser.parseFromString(formattedResponse, 'text/html');
                const bodyContent = doc.body.innerHTML;
                addMessage(bodyContent);
            } else if (formattedResponse.includes('<') && formattedResponse.includes('>')) {
                // ‡πÄ‡∏õ‡πá‡∏ô HTML fragment
                addMessage(formattedResponse);
            } else {
                // ‡πÄ‡∏õ‡πá‡∏ô text ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤ - ‡πÅ‡∏õ‡∏•‡∏á markdown-style formatting
                // ‡πÅ‡∏õ‡∏•‡∏á **text** ‡πÄ‡∏õ‡πá‡∏ô <strong>text</strong>
                formattedResponse = formattedResponse.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
                
                // ‡πÅ‡∏õ‡∏•‡∏á *text* ‡πÄ‡∏õ‡πá‡∏ô <em>text</em>
                formattedResponse = formattedResponse.replace(/\*(.*?)\*/g, '<em>$1</em>');
                
                // ‡πÅ‡∏õ‡∏•‡∏á newlines ‡πÄ‡∏õ‡πá‡∏ô <br>
                formattedResponse = formattedResponse.replace(/\n/g, '<br>');
                
                addMessage(formattedResponse);
            }
        } else {
            addMessage('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + (data.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ'));
        }
    } catch (error) {
        hideLoading();
        addMessage('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
        console.error('Error:', error);
    } finally {
        sendButton.disabled = false;
        messageInput.focus();
    }
}

function askQuestion(question) {
    messageInput.value = question;
    sendMessage({ preventDefault: () => {} });
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö suggestion chips
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('suggestion-chip')) {
        const suggestion = e.target.textContent.replace(/^[üìä‚öΩüì∞üìàüî•üìÖ]\s*/, '');
        let question = '';
        
        switch(suggestion) {
            case '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô':
                question = '‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å';
                break;
            case '‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß':
                question = '‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß ‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å';
                break;
            case '‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î':
                question = '‡∏Ç‡πà‡∏≤‡∏ß‡∏ö‡∏≠‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ';
                break;
            case '‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•':
                question = '‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á';
                break;
            case '‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡∏°':
                question = '‡∏ü‡∏≠‡∏£‡πå‡∏° 5 ‡∏ô‡∏±‡∏î ‡πÅ‡∏°‡∏ô‡∏¢‡∏π';
                break;
            case '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡∏°':
                question = '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡πÅ‡∏°‡∏ô‡∏¢‡∏π vs ‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏û‡∏π‡∏•';
                break;
            case '‡∏ú‡∏•‡∏ö‡∏≠‡∏•':
                question = '‡∏ú‡∏•‡∏ö‡∏≠‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ';
                break;
            default:
                question = suggestion;
        }
        
        askQuestion(question);
    }
});

// Focus on input when page loads
messageInput.focus();

// Enter to send message
messageInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter' && !e.shiftKey) {
        e.preventDefault();
        sendMessage(e);
    }
});
