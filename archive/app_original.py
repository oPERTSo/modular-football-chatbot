import os
from openai import OpenAI
from pathlib import Path
import tiktoken
from typing import List, Dict
import re  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
from dotenv import load_dotenv
from flask import Flask, jsonify, request
from flask_cors import CORS

# from football_chatbot import football_bp, last_results, compare_teams, player_stats, search_player

from rapidfuzz import process, fuzz
import requests
import datetime
import logging

# ‡πÇ‡∏´‡∏•‡∏î environment variables ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
load_dotenv()

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏´‡∏•‡∏î API key ‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
print("üîë ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Keys:")
print(f"OPENAI_API_KEY: {'‚úÖ ‡∏°‡∏µ' if os.getenv('OPENAI_API_KEY') else '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}")
print(f"API_FOOTBALL_KEY: {'‚úÖ ‡∏°‡∏µ' if os.getenv('API_FOOTBALL_KEY') else '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}")
print(f"sportsdb_api_key: {'‚úÖ ‡∏°‡∏µ' if os.getenv('sportsdb_api_key') else '‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ'}")

app = Flask(__name__)
CORS(app)

def load_news_from_data():
    news_items = []
    news_dir = os.path.join(os.path.dirname(__file__), 'data')
    for fname in os.listdir(news_dir):
        if fname.endswith('.txt'):
            with open(os.path.join(news_dir, fname), encoding='utf-8') as f:
                content = f.read().strip()
            title = fname.split('__')[0].replace('_', ' ')
            news_items.append({
                'title': title,
                'content': content
            })
    return news_items

# ...rest of your code...

class ThaiFootballAnalysisChatbot:
    def __init__(self, openai_api_key: str, reference_folder: str, max_tokens: int = 3500):
        self.openai_api_key = openai_api_key
        self.reference_folder = Path(reference_folder)
        self.max_tokens = max_tokens
        self.encoding = tiktoken.encoding_for_model("gpt-3.5-turbo")
        self.reference_data = self.load_reference_files()
        self.thai_football_keywords = {
            'match_prediction': [
                '‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢', '‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå', '‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå', '‡πÄ‡∏ï‡πá‡∏á', '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ö‡∏≠‡∏•', '‡πÅ‡∏ó‡∏á‡∏ö‡∏≠‡∏•', 
                '‡∏ä‡∏ô‡∏∞', '‡πÅ‡∏û‡πâ', '‡πÄ‡∏™‡∏°‡∏≠', '‡∏™‡∏Å‡∏≠‡∏£‡πå', '‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô', '‡πÇ‡∏≠‡∏Å‡∏≤‡∏™'
            ],
            'team_analysis': [
                '‡∏ó‡∏µ‡∏°', '‡∏™‡πÇ‡∏°‡∏™‡∏£', '‡∏ó‡∏±‡πâ‡∏á‡∏ó‡∏µ‡∏°', '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô', '‡∏¢‡∏∏‡∏ó‡∏ò‡∏ß‡∏¥‡∏ò‡∏µ', '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏•‡πà‡∏ô',
                '‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á', '‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô', '‡∏ü‡∏≠‡∏£‡πå‡∏°', '‡∏ú‡∏•‡∏á‡∏≤‡∏ô', '‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á', '‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏ß‡∏≤‡∏á'
            ],
            'player_analysis': [
                '‡∏ô‡∏±‡∏Å‡πÄ‡∏ï‡∏∞', '‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô', '‡∏Å‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤', '‡∏Å‡∏≠‡∏á‡∏Å‡∏•‡∏≤‡∏á', '‡∏Å‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á', '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏õ‡∏£‡∏∞‡∏ï‡∏π',
                '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', '‡∏õ‡∏£‡∏∞‡∏ï‡∏π', '‡πÅ‡∏≠‡∏™‡∏ã‡∏¥‡∏™‡∏ï‡πå', '‡∏ó‡∏±‡∏Å‡∏©‡∏∞', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ', '‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô'
            ],
            'head_to_head': [
                '‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô', '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô', '‡∏ú‡∏•‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡∏≠‡∏î‡∏µ‡∏ï', '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô',
                '‡∏ô‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤', '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏Å‡πà'
            ],
            'injury_news': [
                '‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö', '‡∏≠‡∏≤‡∏Å‡∏≤‡∏£', '‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™', '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û', '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡πà‡∏ô', '‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°',
                '‡πÅ‡∏ö‡∏ô', '‡∏ñ‡∏π‡∏Å‡πÉ‡∏ö‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á', '‡∏ñ‡∏π‡∏Å‡πÉ‡∏ö‡πÅ‡∏î‡∏á', '‡∏•‡∏á‡πÄ‡∏•‡πà‡∏ô', '‡∏ó‡∏µ‡∏°‡∏ï‡∏±‡∏ß‡∏à‡∏£‡∏¥‡∏á'
            ],
            'form_analysis': [
                '‡∏ü‡∏≠‡∏£‡πå‡∏°', '‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡πá‡∏ß‡πÜ‡∏ô‡∏µ‡πâ', '‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏µ‡πâ', '‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô', '‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á',
                '‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î', '‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß', '‡∏§‡∏î‡∏π‡∏Å‡∏≤‡∏•‡∏ô‡∏µ‡πâ', '‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô'
            ]
        }
        self.thai_team_map = {
            # Premier League
            "‡πÅ‡∏°‡∏ô‡∏¢‡∏π": "Manchester United",
            "‡πÅ‡∏°‡∏ô‡∏¢‡∏π‡πÑ‡∏ô‡πÄ‡∏ï‡πá‡∏î": "Manchester United",
            "‡πÅ‡∏°‡∏ô‡πÄ‡∏ä‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏¢‡∏π‡πÑ‡∏ô‡πÄ‡∏ï‡πá‡∏î": "Manchester United",
            "‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏û‡∏π‡∏•": "Liverpool",
            "‡∏´‡∏á‡∏™‡πå‡πÅ‡∏î‡∏á": "Liverpool",
            "‡πÅ‡∏°‡∏ô‡∏ã‡∏¥‡∏ï‡∏µ‡πâ": "Manchester City",
            "‡πÅ‡∏°‡∏ô‡πÄ‡∏ä‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏ã‡∏¥‡∏ï‡∏µ‡πâ": "Manchester City",
            "‡πÄ‡∏£‡∏∑‡∏≠‡πÉ‡∏ö‡∏™‡∏µ‡∏ü‡πâ‡∏≤": "Manchester City",
            "‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏ã‡∏ô‡∏≠‡∏•": "Arsenal",
            "‡∏õ‡∏∑‡∏ô‡πÉ‡∏´‡∏ç‡πà": "Arsenal",
            "‡πÄ‡∏ä‡∏•‡∏ã‡∏µ": "Chelsea",
            "‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏•‡∏π‡∏™‡πå": "Chelsea",
            "‡∏™‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏™": "Tottenham",
            "‡∏ó‡πá‡∏≠‡∏ï‡πÅ‡∏ô‡πà‡∏° ‡∏Æ‡πá‡∏≠‡∏ó‡∏™‡πÄ‡∏õ‡∏≠‡∏£‡πå": "Tottenham",
            "‡πÑ‡∏Å‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏¢‡∏ó‡∏≠‡∏á": "Tottenham",
            "‡∏ô‡∏¥‡∏ß‡∏Ñ‡∏≤‡∏™‡πÄ‡∏ã‡∏¥‡∏•": "Newcastle",
            "‡∏ô‡∏¥‡∏ß‡∏Ñ‡∏≤‡∏™‡πÄ‡∏ã‡∏¥‡∏• ‡∏¢‡∏π‡πÑ‡∏ô‡πÄ‡∏ï‡πá‡∏î": "Newcastle",
            "‡πÅ‡∏≠‡∏™‡∏ï‡∏±‡∏ô ‡∏ß‡∏¥‡∏•‡∏•‡πà‡∏≤": "Aston Villa",
            "‡πÑ‡∏ö‡∏£‡∏ó‡πå‡∏ï‡∏±‡∏ô": "Brighton",
            "‡πÄ‡∏ß‡∏™‡∏ï‡πå‡πÅ‡∏Æ‡∏°": "West Ham",

            # La Liga
            "‡∏ö‡∏≤‡∏£‡πå‡πÄ‡∏ã‡πÇ‡∏•‡∏ô‡∏≤": "Barcelona",
            "‡∏ö‡∏≤‡∏£‡πå‡πÄ‡∏ã‡πÇ‡∏•‡∏ô‡πà‡∏≤": "Barcelona",
            "‡∏ö‡∏≤‡∏£‡πå‡∏ã‡πà‡∏≤": "Barcelona",
            "‡πÄ‡∏£‡∏≠‡∏±‡∏• ‡∏°‡∏≤‡∏î‡∏£‡∏¥‡∏î": "Real Madrid",
            "‡∏£‡∏≤‡∏ä‡∏±‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡∏≤‡∏ß": "Real Madrid",
            "‡πÅ‡∏≠‡∏ï‡πÄ‡∏•‡∏ï‡∏¥‡πÇ‡∏Å ‡∏°‡∏≤‡∏î‡∏£‡∏¥‡∏î": "Atletico Madrid",
            "‡πÅ‡∏≠‡∏ï‡∏Ø ‡∏°‡∏≤‡∏î‡∏£‡∏¥‡∏î": "Atletico Madrid",
            "‡πÄ‡∏ã‡∏ö‡∏µ‡∏ç‡πà‡∏≤": "Sevilla",
            "‡∏ö‡∏µ‡∏¢‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏≠‡∏±‡∏•": "Villarreal",
            "‡∏ö‡∏≤‡πÄ‡∏•‡∏ô‡πÄ‡∏ã‡∏µ‡∏¢": "Valencia",

            # Bundesliga
            "‡∏ö‡∏≤‡πÄ‡∏¢‡∏¥‡∏£‡πå‡∏ô": "Bayern Munich",
            "‡∏ö‡∏≤‡πÄ‡∏¢‡∏¥‡∏£‡πå‡∏ô ‡∏°‡∏¥‡∏ß‡∏ô‡∏¥‡∏Ñ": "Bayern Munich",
            "‡πÄ‡∏™‡∏∑‡∏≠‡πÉ‡∏ï‡πâ": "Bayern Munich",
            "‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏°‡∏∏‡∏ô‡∏î‡πå": "Borussia Dortmund",
            "‡πÇ‡∏ö‡∏£‡∏∏‡∏™‡πÄ‡∏ã‡∏µ‡∏¢ ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏°‡∏∏‡∏ô‡∏î‡πå": "Borussia Dortmund",
            "‡πÄ‡∏™‡∏∑‡∏≠‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á": "Borussia Dortmund",
            "‡πÑ‡∏•‡∏õ‡πå‡∏ã‡∏¥‡∏Å": "RB Leipzig",
            "‡πÄ‡∏•‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ñ‡∏π‡πÄ‡∏ã‡πà‡∏ô": "Bayer Leverkusen",
            "‡πÅ‡∏ü‡∏£‡∏á‡∏Ñ‡πå‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏ï": "Eintracht Frankfurt",

            # Serie A
            "‡∏¢‡∏π‡πÄ‡∏ß‡∏ô‡∏ï‡∏∏‡∏™": "Juventus",
            "‡∏°‡πâ‡∏≤‡∏•‡∏≤‡∏¢": "Juventus",
            "‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏°‡∏¥‡∏•‡∏≤‡∏ô": "Inter",
            "‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå": "Inter",
            "‡πÄ‡∏≠‡∏ã‡∏µ ‡∏°‡∏¥‡∏•‡∏≤‡∏ô": "AC Milan",
            "‡∏°‡∏¥‡∏•‡∏≤‡∏ô": "AC Milan",
            "‡πÇ‡∏£‡∏°‡πà‡∏≤": "Roma",
            "‡∏ô‡∏≤‡πÇ‡∏õ‡∏•‡∏µ": "Napoli",
            "‡∏•‡∏≤‡∏ã‡∏¥‡πÇ‡∏≠": "Lazio",

            # Ligue 1
            "‡πÄ‡∏õ‡πÅ‡∏≠‡∏™‡πÄ‡∏ä": "Paris Saint Germain",
            "‡∏õ‡∏≤‡∏£‡∏µ‡∏™ ‡πÅ‡∏ã‡∏á‡∏ï‡πå ‡πÅ‡∏ä‡∏£‡πå‡∏Å‡πÅ‡∏°‡∏á": "Paris Saint Germain",
            "‡∏õ‡∏≤‡∏£‡∏µ‡∏™": "Paris Saint Germain",
            "‡πÇ‡∏≠‡∏•‡∏¥‡∏°‡∏õ‡∏¥‡∏Å ‡∏°‡∏≤‡∏£‡πå‡∏Å‡πÄ‡∏ã‡∏¢": "Marseille",
            "‡∏•‡∏µ‡∏¢‡∏á": "Lyon",
            "‡πÇ‡∏°‡∏ô‡∏≤‡πÇ‡∏Å": "Monaco",
            "‡πÅ‡∏£‡∏ô‡∏™‡πå": "Rennes",
        }
        self.team_to_league = {
            # Premier League
            "Manchester United": 39, "‡πÅ‡∏°‡∏ô‡πÄ‡∏ä‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏¢‡∏π‡πÑ‡∏ô‡πÄ‡∏ï‡πá‡∏î": 39, "‡πÅ‡∏°‡∏ô‡∏¢‡∏π": 39, "‡πÅ‡∏°‡∏ô‡∏¢‡∏π‡πÑ‡∏ô‡πÄ‡∏ï‡πá‡∏î": 39,
            "Liverpool": 39, "‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏û‡∏π‡∏•": 39, "‡∏´‡∏á‡∏™‡πå‡πÅ‡∏î‡∏á": 39,
            "Arsenal": 39, "‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏ã‡∏ô‡∏≠‡∏•": 39, "‡∏õ‡∏∑‡∏ô‡πÉ‡∏´‡∏ç‡πà": 39,
            "Chelsea": 39, "‡πÄ‡∏ä‡∏•‡∏ã‡∏µ": 39, "‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏•‡∏π‡∏™‡πå": 39,
            "Manchester City": 39, "‡πÅ‡∏°‡∏ô‡πÄ‡∏ä‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏ã‡∏¥‡∏ï‡∏µ‡πâ": 39, "‡πÅ‡∏°‡∏ô‡∏ã‡∏¥‡∏ï‡∏µ‡πâ": 39, "‡πÄ‡∏£‡∏∑‡∏≠‡πÉ‡∏ö‡∏™‡∏µ‡∏ü‡πâ‡∏≤": 39,
            "Tottenham": 39, "‡∏™‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏™": 39, "‡∏ó‡πá‡∏≠‡∏ï‡πÅ‡∏ô‡πà‡∏° ‡∏Æ‡πá‡∏≠‡∏ó‡∏™‡πÄ‡∏õ‡∏≠‡∏£‡πå": 39, "‡πÑ‡∏Å‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏¢‡∏ó‡∏≠‡∏á": 39,
            "Newcastle": 39, "‡∏ô‡∏¥‡∏ß‡∏Ñ‡∏≤‡∏™‡πÄ‡∏ã‡∏¥‡∏•": 39, "‡∏ô‡∏¥‡∏ß‡∏Ñ‡∏≤‡∏™‡πÄ‡∏ã‡∏¥‡∏• ‡∏¢‡∏π‡πÑ‡∏ô‡πÄ‡∏ï‡πá‡∏î": 39,
            "Aston Villa": 39, "‡πÅ‡∏≠‡∏™‡∏ï‡∏±‡∏ô ‡∏ß‡∏¥‡∏•‡∏•‡πà‡∏≤": 39,

            # La Liga
            "Barcelona": 140, "‡∏ö‡∏≤‡∏£‡πå‡πÄ‡∏ã‡πÇ‡∏•‡∏ô‡∏≤": 140, "‡∏ö‡∏≤‡∏£‡πå‡πÄ‡∏ã‡πÇ‡∏•‡∏ô‡πà‡∏≤": 140, "‡∏ö‡∏≤‡∏£‡πå‡∏ã‡πà‡∏≤": 140,
            "Real Madrid": 140, "‡πÄ‡∏£‡∏≠‡∏±‡∏• ‡∏°‡∏≤‡∏î‡∏£‡∏¥‡∏î": 140, "‡∏£‡∏≤‡∏ä‡∏±‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡∏≤‡∏ß": 140,
            "Atletico Madrid": 140, "‡πÅ‡∏≠‡∏ï‡πÄ‡∏•‡∏ï‡∏¥‡πÇ‡∏Å ‡∏°‡∏≤‡∏î‡∏£‡∏¥‡∏î": 140, "‡πÅ‡∏≠‡∏ï‡∏Ø ‡∏°‡∏≤‡∏î‡∏£‡∏¥‡∏î": 140,
            "Sevilla": 140, "‡πÄ‡∏ã‡∏ö‡∏µ‡∏ç‡πà‡∏≤": 140,
            "Villarreal": 140, "‡∏ö‡∏µ‡∏¢‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏≠‡∏±‡∏•": 140,

            # Bundesliga
            "Bayern Munich": 78, "‡∏ö‡∏≤‡πÄ‡∏¢‡∏¥‡∏£‡πå‡∏ô": 78, "‡∏ö‡∏≤‡πÄ‡∏¢‡∏¥‡∏£‡πå‡∏ô ‡∏°‡∏¥‡∏ß‡∏ô‡∏¥‡∏Ñ": 78, "‡πÄ‡∏™‡∏∑‡∏≠‡πÉ‡∏ï‡πâ": 78,
            "Borussia Dortmund": 78, "‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏°‡∏∏‡∏ô‡∏î‡πå": 78, "‡πÇ‡∏ö‡∏£‡∏∏‡∏™‡πÄ‡∏ã‡∏µ‡∏¢ ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏°‡∏∏‡∏ô‡∏î‡πå": 78, "‡πÄ‡∏™‡∏∑‡∏≠‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á": 78,
            "RB Leipzig": 78, "‡πÑ‡∏•‡∏õ‡πå‡∏ã‡∏¥‡∏Å": 78,
            "Bayer Leverkusen": 78, "‡πÄ‡∏•‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ñ‡∏π‡πÄ‡∏ã‡πà‡∏ô": 78,
            "Eintracht Frankfurt": 78, "‡πÅ‡∏ü‡∏£‡∏á‡∏Ñ‡πå‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏ï": 78,

            # Serie A
            "Juventus": 135, "‡∏¢‡∏π‡πÄ‡∏ß‡∏ô‡∏ï‡∏∏‡∏™": 135, "‡∏°‡πâ‡∏≤‡∏•‡∏≤‡∏¢": 135,
            "Inter": 135, "‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏°‡∏¥‡∏•‡∏≤‡∏ô": 135, "‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå": 135,
            "AC Milan": 135, "‡πÄ‡∏≠‡∏ã‡∏µ ‡∏°‡∏¥‡∏•‡∏≤‡∏ô": 135, "‡∏°‡∏¥‡∏•‡∏≤‡∏ô": 135,
            "Roma": 135, "‡πÇ‡∏£‡∏°‡πà‡∏≤": 135,
            "Napoli": 135, "‡∏ô‡∏≤‡πÇ‡∏õ‡∏•‡∏µ": 135,
            "Lazio": 135, "‡∏•‡∏≤‡∏ã‡∏¥‡πÇ‡∏≠": 135,

            # Ligue 1
            "Paris Saint Germain": 61, "‡πÄ‡∏õ‡πÅ‡∏≠‡∏™‡πÄ‡∏ä": 61, "‡∏õ‡∏≤‡∏£‡∏µ‡∏™ ‡πÅ‡∏ã‡∏á‡∏ï‡πå ‡πÅ‡∏ä‡∏£‡πå‡∏Å‡πÅ‡∏°‡∏á": 61, "‡∏õ‡∏≤‡∏£‡∏µ‡∏™": 61,
            "Marseille": 61, "‡πÇ‡∏≠‡∏•‡∏¥‡∏°‡∏õ‡∏¥‡∏Å ‡∏°‡∏≤‡∏£‡πå‡∏Å‡πÄ‡∏ã‡∏¢": 61,
            "Lyon": 61, "‡∏•‡∏µ‡∏¢‡∏á": 61,
            "Monaco": 61, "‡πÇ‡∏°‡∏ô‡∏≤‡πÇ‡∏Å": 61,
            "Rennes": 61, "‡πÅ‡∏£‡∏ô‡∏™‡πå": 61,
        }

        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)

    def load_reference_files(self) -> Dict[str, Dict]:
        reference_data = {}
        if not self.reference_folder.exists():
            print(f"‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á {self.reference_folder}")
            return reference_data
        txt_files = list(self.reference_folder.glob("*.txt"))
        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏• {len(txt_files)} ‡πÑ‡∏ü‡∏•‡πå...")
        for file_path in txt_files:
            try:
                content = None
                for encoding in ['utf-8', 'utf-8-sig', 'cp874', 'tis-620']:
                    try:
                        with open(file_path, 'r', encoding=encoding) as f:
                            content = f.read().strip()
                            break
                    except UnicodeDecodeError:
                        continue
                if content:
                    file_type = self.categorize_thai_file(file_path.stem, content)
                    reference_data[file_path.stem] = {
                        'content': content,
                        'type': file_type,
                        'filename': file_path.name,
                        'word_count': len(content.split())
                    }
                    print(f"‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß: {file_path.name} ({file_type})")
                else:
                    print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {file_path.name}")
            except Exception as e:
                print(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î {file_path}: {e}")
        print(f"‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à {len(reference_data)} ‡πÑ‡∏ü‡∏•‡πå")
        return reference_data

    def categorize_thai_file(self, filename: str, content: str) -> str:
        filename_lower = filename.lower()
        content_lower = content.lower()
        thai_team_keywords = ['‡∏ó‡∏µ‡∏°', '‡∏™‡πÇ‡∏°‡∏™‡∏£', '‡∏Ñ‡∏•‡∏±‡∏ö']
        thai_player_keywords = ['‡∏ô‡∏±‡∏Å‡πÄ‡∏ï‡∏∞', '‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô', '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', '‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå']
        thai_match_keywords = ['‡∏ô‡∏±‡∏î', '‡πÅ‡∏°‡∏ï‡∏ä‡πå', '‡πÄ‡∏Å‡∏°', '‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô']
        thai_league_keywords = ['‡∏•‡∏µ‡∏Å', '‡∏ï‡∏≤‡∏£‡∏≤‡∏á', '‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö']
        thai_news_keywords = ['‡∏Ç‡πà‡∏≤‡∏ß', '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó', '‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö']
        if any(word in filename_lower for word in ['team', 'squad', 'club'] + thai_team_keywords):
            return '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°'
        elif any(word in filename_lower for word in ['player', 'stats', 'profile'] + thai_player_keywords):
            return '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏ï‡∏∞'
        elif any(word in filename_lower for word in ['match', 'fixture', 'game'] + thai_match_keywords):
            return '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô'
        elif any(word in filename_lower for word in ['league', 'table', 'standing'] + thai_league_keywords):
            return '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏µ‡∏Å'
        elif any(word in filename_lower for word in ['injury', 'news', 'update'] + thai_news_keywords):
            return '‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£'
        if any(word in content_lower for word in ['‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡πà‡∏ô', '‡∏¢‡∏∏‡∏ó‡∏ò‡∏ß‡∏¥‡∏ò‡∏µ', '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö']):
            return '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏∏‡∏ó‡∏ò‡∏ß‡∏¥‡∏ò‡∏µ'
        elif any(word in content_lower for word in ['‡∏õ‡∏£‡∏∞‡∏ï‡∏π', '‡πÅ‡∏≠‡∏™‡∏ã‡∏¥‡∏™‡∏ï‡πå', '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥']):
            return '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡∏±‡∏Å‡πÄ‡∏ï‡∏∞'
        elif any(word in content_lower for word in ['‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢', '‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå', '‡πÄ‡∏ï‡πá‡∏á']):
            return '‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô'
        return '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'

    def count_tokens(self, text: str) -> int:
        return len(self.encoding.encode(text))

    def detect_thai_query_type(self, query: str) -> str:
        query_lower = query.lower()
        if any(keyword in query_lower for keyword in self.thai_football_keywords['match_prediction']):
            return '‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô'
        elif any(keyword in query_lower for keyword in self.thai_football_keywords['player_analysis']):
            return '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ô‡∏±‡∏Å‡πÄ‡∏ï‡∏∞'
        elif any(keyword in query_lower for keyword in self.thai_football_keywords['team_analysis']):
            return '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏°'
        elif any(keyword in query_lower for keyword in self.thai_football_keywords['head_to_head']):
            return '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô'
        elif any(keyword in query_lower for keyword in self.thai_football_keywords['injury_news']):
            return '‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡∏°'
        elif any(keyword in query_lower for keyword in self.thai_football_keywords['form_analysis']):
            return '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°'
        elif "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô" in query_lower or "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö" in query_lower:
            return "standings"
        elif "‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°" in query_lower or "‡∏ô‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ" in query_lower:
            return "next_fixture"
        elif "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö" in query_lower:
            return "compare"
        elif "‡∏ú‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î" in query_lower or "‡∏ú‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏∑‡∏ô" in query_lower:
            return "latest_result"
        return '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'

    def extract_league_id(self, user_message: str) -> int:
        league_map = {
            "‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å": 39, "premier league": 39, "england": 39, "‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©": 39,
            "‡∏ö‡∏∏‡∏ô‡πÄ‡∏î‡∏™‡∏•‡∏µ‡∏Å‡∏≤": 78, "bundesliga": 78, "‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏±‡∏ô": 78, "germany": 78,
            "‡∏•‡∏≤‡∏•‡∏¥‡∏Å‡πâ‡∏≤": 140, "‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤": 140, "‡∏•‡∏≤ ‡∏•‡∏µ‡∏Å‡∏≤": 140, "‡∏•‡∏≤-‡∏•‡∏µ‡∏Å‡∏≤": 140, "laliga": 140, "la liga": 140, "‡∏™‡πÄ‡∏õ‡∏ô": 140, "spain": 140,
            "‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢ ‡∏≠‡∏≤": 135, "serie a": 135, "‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ": 135, "italy": 135,
            "‡∏•‡∏µ‡∏Å‡πÄ‡∏≠‡∏¥‡∏á": 61, "ligue 1": 61, "‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™": 61, "france": 61,
        }
        msg = user_message.lower()
        best, score, _ = process.extractOne(msg, league_map.keys(), scorer=fuzz.partial_ratio)
        if score > 75:
            return league_map[best]
        return 39  # default Premier League

    def extract_team_id(self, user_message: str) -> int:
        return None

    def search_relevant_thai_content(self, query: str, query_type: str, top_k: int = 4) -> List[Dict]:
        query_lower = query.lower()
        relevant_content = []
        thai_entities = re.findall(r'[\u0E00-\u0E7F]+(?:\s+[\u0E00-\u0E7F]+)*', query)
        english_entities = re.findall(r'\b[A-Z][a-z]+(?:\s+[A-Z][a-z]+)*\b', query)
        all_entities = thai_entities + english_entities
        for filename, file_data in self.reference_data.items():
            content = file_data['content']
            content_lower = content.lower()
            file_type = file_data['type'
            ]
            score = 0
            query_words = query_lower.split()
            matches = sum(1 for word in query_words if word in content_lower)
            score += matches
            entity_matches = sum(1 for entity in all_entities if entity.lower() in content_lower)
            score += entity_matches * 4
            type_bonus = 0
            type_mapping = {
                '‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô': ['‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°'],
                '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ô‡∏±‡∏Å‡πÄ‡∏ï‡∏∞': ['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏±‡∏Å‡πÄ‡∏ï‡∏∞', '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ô‡∏±‡∏Å‡πÄ‡∏ï‡∏∞'],
                '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏°': ['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°', '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏¢‡∏∏‡∏ó‡∏ò‡∏ß‡∏¥‡∏ò‡∏µ'],
                '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô': ['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°'],
                '‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡∏°': ['‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°'],
                '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°': ['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡∏°', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô']
            }
            if query_type in type_mapping and file_type in type_mapping[query_type]:
                type_bonus = 6
            score += type_bonus
            if query_type in ['‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô', '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ô‡∏±‡∏Å‡πÄ‡∏ï‡∏∞', '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏°', '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô', '‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡∏°', '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°']:
                thai_keyword_map = {
                    '‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô': 'match_prediction',
                    '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ô‡∏±‡∏Å‡πÄ‡∏ï‡∏∞': 'player_analysis', 
                    '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡∏°': 'team_analysis',
                    '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏≠‡∏Å‡∏±‡∏ô': 'head_to_head',
                    '‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡∏°': 'injury_news',
                    '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ü‡∏≠‡∏£‡πå‡∏°': 'form_analysis'
                }
                keyword_category = thai_keyword_map.get(query_type)
                if keyword_category and keyword_category in self.thai_football_keywords:
                    thai_matches = sum(1 for keyword in self.thai_football_keywords[keyword_category] 
                                     if keyword in content.lower())
                    score += thai_matches * 3
            if score > 0:
                relevant_content.append({
                    'filename': filename,
                    'content': content,
                    'type': file_type,
                    'score': score,
                    'matches': matches
                })
        relevant_content.sort(key=lambda x: x['score'], reverse=True)
        return relevant_content[:top_k]

    def build_thai_context(self, query: str, query_type: str) -> str:
        relevant_items = self.search_relevant_thai_content(query, query_type)
        context_parts = []
        total_tokens = 0
        for item in relevant_items:
            content = item['content']
            file_type = item['type']
            filename = item['filename']
            content_tokens = self.count_tokens(content)
            formatted_content = f"[{file_type} - {filename}]\n{content}"
            formatted_tokens = self.count_tokens(formatted_content)
            if total_tokens + formatted_tokens > self.max_tokens:
                remaining_tokens = self.max_tokens - total_tokens - 100
                if remaining_tokens > 150:
                    truncated = self.encoding.decode(
                        self.encoding.encode(content)[:remaining_tokens]
                    )
                    context_parts.append(f"[{file_type} - {filename}]\n{truncated}...")
                break
            else:
                context_parts.append(formatted_content)
                total_tokens += formatted_tokens
        return "\n\n" + "="*50 + "\n\n".join(context_parts)

    def get_last_fixtures(self, team_name: str, count: int = 5):
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        team_en = self.thai_team_map.get(team_name, team_name)
        
        # ‡∏Ç‡∏¢‡∏≤‡∏¢ mapping ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏ó‡∏µ‡∏°‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
        team_name_to_id = {
            # Premier League
            "Manchester United": 33, "‡πÅ‡∏°‡∏ô‡πÄ‡∏ä‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏¢‡∏π‡πÑ‡∏ô‡πÄ‡∏ï‡πá‡∏î": 33, "‡πÅ‡∏°‡∏ô‡∏¢‡∏π": 33, "‡πÅ‡∏°‡∏ô‡∏¢‡∏π‡πÑ‡∏ô‡πÄ‡∏ï‡πá‡∏î": 33,
            "Liverpool": 40, "‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏û‡∏π‡∏•": 40, "‡∏´‡∏á‡∏™‡πå‡πÅ‡∏î‡∏á": 40,
            "Arsenal": 42, "‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏ã‡∏ô‡∏≠‡∏•": 42, "‡∏õ‡∏∑‡∏ô‡πÉ‡∏´‡∏ç‡πà": 42,
            "Chelsea": 49, "‡πÄ‡∏ä‡∏•‡∏ã‡∏µ": 49, "‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏•‡∏π‡∏™‡πå": 49,
            "Manchester City": 50, "‡πÅ‡∏°‡∏ô‡πÄ‡∏ä‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏ã‡∏¥‡∏ï‡∏µ‡πâ": 50, "‡πÅ‡∏°‡∏ô‡∏ã‡∏¥‡∏ï‡∏µ‡πâ": 50, "‡πÄ‡∏£‡∏∑‡∏≠‡πÉ‡∏ö‡∏™‡∏µ‡∏ü‡πâ‡∏≤": 50,
            "Tottenham": 47, "‡∏™‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏™": 47, "‡∏ó‡πá‡∏≠‡∏ï‡πÅ‡∏ô‡πà‡∏° ‡∏Æ‡πá‡∏≠‡∏ó‡∏™‡πÄ‡∏õ‡∏≠‡∏£‡πå": 47, "‡πÑ‡∏Å‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏¢‡∏ó‡∏≠‡∏á": 47,
            "Newcastle": 34, "‡∏ô‡∏¥‡∏ß‡∏Ñ‡∏≤‡∏™‡πÄ‡∏ã‡∏¥‡∏•": 34, "‡∏ô‡∏¥‡∏ß‡∏Ñ‡∏≤‡∏™‡πÄ‡∏ã‡∏¥‡∏• ‡∏¢‡∏π‡πÑ‡∏ô‡πÄ‡∏ï‡πá‡∏î": 34,
            "Aston Villa": 66, "‡πÅ‡∏≠‡∏™‡∏ï‡∏±‡∏ô ‡∏ß‡∏¥‡∏•‡∏•‡πà‡∏≤": 66,
            "Brighton": 51, "‡πÑ‡∏ö‡∏£‡∏ó‡πå‡∏ï‡∏±‡∏ô": 51,
            "West Ham": 48, "‡πÄ‡∏ß‡∏™‡∏ï‡πå‡πÅ‡∏Æ‡∏°": 48,
            
            # La Liga
            "Barcelona": 529, "‡∏ö‡∏≤‡∏£‡πå‡πÄ‡∏ã‡πÇ‡∏•‡∏ô‡∏≤": 529, "‡∏ö‡∏≤‡∏£‡πå‡πÄ‡∏ã‡πÇ‡∏•‡∏ô‡πà‡∏≤": 529, "‡∏ö‡∏≤‡∏£‡πå‡∏ã‡πà‡∏≤": 529,
            "Real Madrid": 541, "‡πÄ‡∏£‡∏≠‡∏±‡∏• ‡∏°‡∏≤‡∏î‡∏£‡∏¥‡∏î": 541, "‡∏£‡∏≤‡∏ä‡∏±‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡∏≤‡∏ß": 541,
            "Atletico Madrid": 530, "‡πÅ‡∏≠‡∏ï‡πÄ‡∏•‡∏ï‡∏¥‡πÇ‡∏Å ‡∏°‡∏≤‡∏î‡∏£‡∏¥‡∏î": 530, "‡πÅ‡∏≠‡∏ï‡∏Ø ‡∏°‡∏≤‡∏î‡∏£‡∏¥‡∏î": 530,
            "Sevilla": 536, "‡πÄ‡∏ã‡∏ö‡∏µ‡∏ç‡πà‡∏≤": 536,
            "Villarreal": 533, "‡∏ö‡∏µ‡∏¢‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏≠‡∏±‡∏•": 533,
            "Valencia": 532, "‡∏ö‡∏≤‡πÄ‡∏•‡∏ô‡πÄ‡∏ã‡∏µ‡∏¢": 532,
            
            # Bundesliga
            "Bayern Munich": 157, "‡∏ö‡∏≤‡πÄ‡∏¢‡∏¥‡∏£‡πå‡∏ô": 157, "‡∏ö‡∏≤‡πÄ‡∏¢‡∏¥‡∏£‡πå‡∏ô ‡∏°‡∏¥‡∏ß‡∏ô‡∏¥‡∏Ñ": 157, "‡πÄ‡∏™‡∏∑‡∏≠‡πÉ‡∏ï‡πâ": 157,
            "Borussia Dortmund": 165, "‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏°‡∏∏‡∏ô‡∏î‡πå": 165, "‡πÇ‡∏ö‡∏£‡∏∏‡∏™‡πÄ‡∏ã‡∏µ‡∏¢ ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏°‡∏∏‡∏ô‡∏î‡πå": 165, "‡πÄ‡∏™‡∏∑‡∏≠‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á": 165,
            "RB Leipzig": 173, "‡πÑ‡∏•‡∏õ‡πå‡∏ã‡∏¥‡∏Å": 173,
            "Bayer Leverkusen": 168, "‡πÄ‡∏•‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ñ‡∏π‡πÄ‡∏ã‡πà‡∏ô": 168,
            "Eintracht Frankfurt": 169, "‡πÅ‡∏ü‡∏£‡∏á‡∏Ñ‡πå‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏ï": 169,
            
            # Serie A
            "Juventus": 496, "‡∏¢‡∏π‡πÄ‡∏ß‡∏ô‡∏ï‡∏∏‡∏™": 496, "‡∏°‡πâ‡∏≤‡∏•‡∏≤‡∏¢": 496,
            "Inter": 505, "‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏°‡∏¥‡∏•‡∏≤‡∏ô": 505, "‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå": 505,
            "AC Milan": 489, "‡πÄ‡∏≠‡∏ã‡∏µ ‡∏°‡∏¥‡∏•‡∏≤‡∏ô": 489, "‡∏°‡∏¥‡∏•‡∏≤‡∏ô": 489,
            "Roma": 497, "‡πÇ‡∏£‡∏°‡πà‡∏≤": 497,
            "Napoli": 492, "‡∏ô‡∏≤‡πÇ‡∏õ‡∏•‡∏µ": 492,
            "Lazio": 487, "‡∏•‡∏≤‡∏ã‡∏¥‡πÇ‡∏≠": 487,
            
            # Ligue 1
            "Paris Saint Germain": 85, "‡πÄ‡∏õ‡πÅ‡∏≠‡∏™‡πÄ‡∏ä": 85, "‡∏õ‡∏≤‡∏£‡∏µ‡∏™ ‡πÅ‡∏ã‡∏á‡∏ï‡πå ‡πÅ‡∏ä‡∏£‡πå‡∏Å‡πÅ‡∏°‡∏á": 85, "‡∏õ‡∏≤‡∏£‡∏µ‡∏™": 85,
            "Marseille": 81, "‡πÇ‡∏≠‡∏•‡∏¥‡∏°‡∏õ‡∏¥‡∏Å ‡∏°‡∏≤‡∏£‡πå‡∏Å‡πÄ‡∏ã‡∏¢": 81,
            "Lyon": 80, "‡∏•‡∏µ‡∏¢‡∏á": 80,
            "Monaco": 91, "‡πÇ‡∏°‡∏ô‡∏≤‡πÇ‡∏Å": 91,
            "Rennes": 94, "‡πÅ‡∏£‡∏ô‡∏™‡πå": 94,
        }
        
        # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÅ‡∏•‡∏∞‡πÑ‡∏ó‡∏¢
        team_id = team_name_to_id.get(team_name) or team_name_to_id.get(team_en)
        
        if not team_id:
            return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡∏° '{team_name}' ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏≠‡∏∑‡πà‡∏ô\n\nüìã ‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö:\n‚Ä¢ ‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å: ‡πÅ‡∏°‡∏ô‡∏¢‡∏π, ‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏û‡∏π‡∏•, ‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏ã‡∏ô‡∏≠‡∏•, ‡πÄ‡∏ä‡∏•‡∏ã‡∏µ, ‡πÅ‡∏°‡∏ô‡∏ã‡∏¥‡∏ï‡∏µ‡πâ, ‡∏™‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏™\n‚Ä¢ ‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤: ‡∏ö‡∏≤‡∏£‡πå‡∏ã‡πà‡∏≤, ‡πÄ‡∏£‡∏≠‡∏±‡∏• ‡∏°‡∏≤‡∏î‡∏£‡∏¥‡∏î, ‡πÅ‡∏≠‡∏ï‡πÄ‡∏•‡∏ï‡∏¥‡πÇ‡∏Å\n‚Ä¢ ‡∏ö‡∏∏‡∏ô‡πÄ‡∏î‡∏™‡∏•‡∏µ‡∏Å‡∏≤: ‡∏ö‡∏≤‡πÄ‡∏¢‡∏¥‡∏£‡πå‡∏ô, ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏°‡∏∏‡∏ô‡∏î‡πå\n‚Ä¢ ‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢ ‡∏≠‡∏≤: ‡∏¢‡∏π‡πÄ‡∏ß‡∏ô‡∏ï‡∏∏‡∏™, ‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå, ‡∏°‡∏¥‡∏•‡∏≤‡∏ô\n‚Ä¢ ‡∏•‡∏µ‡∏Å‡πÄ‡∏≠‡∏¥‡∏á: ‡∏õ‡∏≤‡∏£‡∏µ‡∏™ ‡πÅ‡∏ã‡∏á‡∏ï‡πå ‡πÅ‡∏ä‡∏£‡πå‡∏Å‡πÅ‡∏°‡∏á"
        
        api_key = os.getenv("API_FOOTBALL_KEY")
        url = f"https://v3.football.api-sports.io/fixtures?team={team_id}&last={count}"
        headers = {"x-apisports-key": api_key}
        try:
            self.logger.info(f"Fetching fixtures for {team_name}")
            response = requests.get(url, headers=headers, timeout=10)
            if response.status_code == 200:
                data = response.json()
                if data["response"]:
                    results = []
                    for fixture in data["response"]:
                        date = fixture["fixture"]["date"][:10]
                        home = fixture["teams"]["home"]["name"]
                        away = fixture["teams"]["away"]["name"]
                        goals_home = fixture["goals"]["home"]
                        goals_away = fixture["goals"]["away"]
                        status = fixture["fixture"]["status"]["short"]
                        results.append(f"{date}: {home} {goals_home} - {goals_away} {away} ({status})")
                    return f"‡∏ü‡∏≠‡∏£‡πå‡∏° 5 ‡∏ô‡∏±‡∏î‡∏´‡∏•‡∏±‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á {team_en}:\n" + "\n".join(results)
                else:
                    return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏° 5 ‡∏ô‡∏±‡∏î‡∏´‡∏•‡∏±‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á {team_name} ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ó‡∏µ‡∏°‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Ñ‡∏£‡∏ö 5 ‡∏ô‡∏±‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï"
            else:
                return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏° 5 ‡∏ô‡∏±‡∏î‡∏´‡∏•‡∏±‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á {team_name} ‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        except requests.exceptions.Timeout:
            return f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏ä‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        except requests.exceptions.RequestException as e:
            self.logger.error(f"API request failed: {e}")
            return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"

    def compare_teams_form(self, team1_name: str, team2_name: str, count: int = 5):
        """‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 5 ‡∏ô‡∏±‡∏î‡∏´‡∏•‡∏±‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á 2 ‡∏ó‡∏µ‡∏°"""
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
        team1_en = self.thai_team_map.get(team1_name, team1_name)
        team2_en = self.thai_team_map.get(team2_name, team2_name)
        
        # mapping ‡∏ó‡∏µ‡∏°‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏•‡∏µ‡∏Å
        team_name_to_id = {
            # Premier League
            "Manchester United": 33, "‡πÅ‡∏°‡∏ô‡πÄ‡∏ä‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏¢‡∏π‡πÑ‡∏ô‡πÄ‡∏ï‡πá‡∏î": 33, "‡πÅ‡∏°‡∏ô‡∏¢‡∏π": 33, "‡πÅ‡∏°‡∏ô‡∏¢‡∏π‡πÑ‡∏ô‡πÄ‡∏ï‡πá‡∏î": 33,
            "Liverpool": 40, "‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏û‡∏π‡∏•": 40, "‡∏´‡∏á‡∏™‡πå‡πÅ‡∏î‡∏á": 40,
            "Arsenal": 42, "‡∏≠‡∏≤‡∏£‡πå‡πÄ‡∏ã‡∏ô‡∏≠‡∏•": 42, "‡∏õ‡∏∑‡∏ô‡πÉ‡∏´‡∏ç‡πà": 42,
            "Chelsea": 49, "‡πÄ‡∏ä‡∏•‡∏ã‡∏µ": 49, "‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏•‡∏π‡∏™‡πå": 49,
            "Manchester City": 50, "‡πÅ‡∏°‡∏ô‡πÄ‡∏ä‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏ã‡∏¥‡∏ï‡∏µ‡πâ": 50, "‡πÅ‡∏°‡∏ô‡∏ã‡∏¥‡∏ï‡∏µ‡πâ": 50, "‡πÄ‡∏£‡∏∑‡∏≠‡πÉ‡∏ö‡∏™‡∏µ‡∏ü‡πâ‡∏≤": 50,
            "Tottenham": 47, "‡∏™‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏™": 47, "‡∏ó‡πá‡∏≠‡∏ï‡πÅ‡∏ô‡πà‡∏° ‡∏Æ‡πá‡∏≠‡∏ó‡∏™‡πÄ‡∏õ‡∏≠‡∏£‡πå": 47, "‡πÑ‡∏Å‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏¢‡∏ó‡∏≠‡∏á": 47,
            "Newcastle": 34, "‡∏ô‡∏¥‡∏ß‡∏Ñ‡∏≤‡∏™‡πÄ‡∏ã‡∏¥‡∏•": 34, "‡∏ô‡∏¥‡∏ß‡∏Ñ‡∏≤‡∏™‡πÄ‡∏ã‡∏¥‡∏• ‡∏¢‡∏π‡πÑ‡∏ô‡πÄ‡∏ï‡πá‡∏î": 34,
            "Aston Villa": 66, "‡πÅ‡∏≠‡∏™‡∏ï‡∏±‡∏ô ‡∏ß‡∏¥‡∏•‡∏•‡πà‡∏≤": 66,
            "Brighton": 51, "‡πÑ‡∏ö‡∏£‡∏ó‡πå‡∏ï‡∏±‡∏ô": 51,
            "West Ham": 48, "‡πÄ‡∏ß‡∏™‡∏ï‡πå‡πÅ‡∏Æ‡∏°": 48,
            
            # La Liga
            "Barcelona": 529, "‡∏ö‡∏≤‡∏£‡πå‡πÄ‡∏ã‡πÇ‡∏•‡∏ô‡∏≤": 529, "‡∏ö‡∏≤‡∏£‡πå‡πÄ‡∏ã‡πÇ‡∏•‡∏ô‡πà‡∏≤": 529, "‡∏ö‡∏≤‡∏£‡πå‡∏ã‡πà‡∏≤": 529,
            "Real Madrid": 541, "‡πÄ‡∏£‡∏≠‡∏±‡∏• ‡∏°‡∏≤‡∏î‡∏£‡∏¥‡∏î": 541, "‡∏£‡∏≤‡∏ä‡∏±‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡∏≤‡∏ß": 541,
            "Atletico Madrid": 530, "‡πÅ‡∏≠‡∏ï‡πÄ‡∏•‡∏ï‡∏¥‡πÇ‡∏Å ‡∏°‡∏≤‡∏î‡∏£‡∏¥‡∏î": 530, "‡πÅ‡∏≠‡∏ï‡∏Ø ‡∏°‡∏≤‡∏î‡∏£‡∏¥‡∏î": 530,
            "Sevilla": 536, "‡πÄ‡∏ã‡∏ö‡∏µ‡∏ç‡πà‡∏≤": 536,
            "Villarreal": 533, "‡∏ö‡∏µ‡∏¢‡∏≤‡∏£‡πå‡πÄ‡∏£‡∏≠‡∏±‡∏•": 533,
            "Valencia": 532, "‡∏ö‡∏≤‡πÄ‡∏•‡∏ô‡πÄ‡∏ã‡∏µ‡∏¢": 532,
            
            # Bundesliga
            "Bayern Munich": 157, "‡∏ö‡∏≤‡πÄ‡∏¢‡∏¥‡∏£‡πå‡∏ô": 157, "‡∏ö‡∏≤‡πÄ‡∏¢‡∏¥‡∏£‡πå‡∏ô ‡∏°‡∏¥‡∏ß‡∏ô‡∏¥‡∏Ñ": 157, "‡πÄ‡∏™‡∏∑‡∏≠‡πÉ‡∏ï‡πâ": 157,
            "Borussia Dortmund": 165, "‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏°‡∏∏‡∏ô‡∏î‡πå": 165, "‡πÇ‡∏ö‡∏£‡∏∏‡∏™‡πÄ‡∏ã‡∏µ‡∏¢ ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏°‡∏∏‡∏ô‡∏î‡πå": 165, "‡πÄ‡∏™‡∏∑‡∏≠‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á": 165,
            "RB Leipzig": 173, "‡πÑ‡∏•‡∏õ‡πå‡∏ã‡∏¥‡∏Å": 173,
            "Bayer Leverkusen": 168, "‡πÄ‡∏•‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Ñ‡∏π‡πÄ‡∏ã‡πà‡∏ô": 168,
            "Eintracht Frankfurt": 169, "‡πÅ‡∏ü‡∏£‡∏á‡∏Ñ‡πå‡πÄ‡∏ü‡∏¥‡∏£‡πå‡∏ï": 169,
            
            # Serie A
            "Juventus": 496, "‡∏¢‡∏π‡πÄ‡∏ß‡∏ô‡∏ï‡∏∏‡∏™": 496, "‡∏°‡πâ‡∏≤‡∏•‡∏≤‡∏¢": 496,
            "Inter": 505, "‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå ‡∏°‡∏¥‡∏•‡∏≤‡∏ô": 505, "‡∏≠‡∏¥‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå": 505,
            "AC Milan": 489, "‡πÄ‡∏≠‡∏ã‡∏µ ‡∏°‡∏¥‡∏•‡∏≤‡∏ô": 489, "‡∏°‡∏¥‡∏•‡∏≤‡∏ô": 489,
            "Roma": 497, "‡πÇ‡∏£‡∏°‡πà‡∏≤": 497,
            "Napoli": 492, "‡∏ô‡∏≤‡πÇ‡∏õ‡∏•‡∏µ": 492,
            "Lazio": 487, "‡∏•‡∏≤‡∏ã‡∏¥‡πÇ‡∏≠": 487,
            
            # Ligue 1
            "Paris Saint Germain": 85, "‡πÄ‡∏õ‡πÅ‡∏≠‡∏™‡πÄ‡∏ä": 85, "‡∏õ‡∏≤‡∏£‡∏µ‡∏™ ‡πÅ‡∏ã‡∏á‡∏ï‡πå ‡πÅ‡∏ä‡∏£‡πå‡∏Å‡πÅ‡∏°‡∏á": 85, "‡∏õ‡∏≤‡∏£‡∏µ‡∏™": 85,
            "Marseille": 81, "‡πÇ‡∏≠‡∏•‡∏¥‡∏°‡∏õ‡∏¥‡∏Å ‡∏°‡∏≤‡∏£‡πå‡∏Å‡πÄ‡∏ã‡∏¢": 81,
            "Lyon": 80, "‡∏•‡∏µ‡∏¢‡∏á": 80,
            "Monaco": 91, "‡πÇ‡∏°‡∏ô‡∏≤‡πÇ‡∏Å": 91,
            "Rennes": 94, "‡πÅ‡∏£‡∏ô‡∏™‡πå": 94,
        }
        
        # ‡∏´‡∏≤ team_id ‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ó‡∏µ‡∏°
        team1_id = team_name_to_id.get(team1_name) or team_name_to_id.get(team1_en)
        team2_id = team_name_to_id.get(team2_name) or team_name_to_id.get(team2_en)
        
        if not team1_id or not team2_id:
            missing_teams = []
            if not team1_id:
                missing_teams.append(team1_name)
            if not team2_id:
                missing_teams.append(team2_name)
            return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡∏°: {', '.join(missing_teams)} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏≠‡∏∑‡πà‡∏ô"
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ó‡∏µ‡∏°
        api_key = os.getenv("API_FOOTBALL_KEY")
        
        def get_team_form(team_id, team_name):
            url = f"https://v3.football.api-sports.io/fixtures?team={team_id}&last={count}"
            headers = {"x-apisports-key": api_key}
            response = requests.get(url, headers=headers)
            
            if response.status_code == 200:
                data = response.json()
                if data["response"]:
                    results = []
                    wins, draws, losses = 0, 0, 0
                    goals_for, goals_against = 0, 0
                    
                    for fixture in data["response"]:
                        date = fixture["fixture"]["date"][:10]
                        home = fixture["teams"]["home"]["name"]
                        away = fixture["teams"]["away"]["name"]
                        goals_home = fixture["goals"]["home"]
                        goals_away = fixture["goals"]["away"]
                        
                        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ú‡∏•‡πÅ‡∏û‡πâ‡∏ä‡∏ô‡∏∞
                        if home == team_name or fixture["teams"]["home"]["id"] == team_id:
                            # ‡∏ó‡∏µ‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏ö‡πâ‡∏≤‡∏ô
                            goals_for += goals_home if goals_home else 0
                            goals_against += goals_away if goals_away else 0
                            if goals_home and goals_away is not None:
                                if goals_home > goals_away:
                                    wins += 1
                                    result = "‡∏ä‡∏ô‡∏∞"
                                elif goals_home < goals_away:
                                    losses += 1
                                    result = "‡πÅ‡∏û‡πâ"
                                else:
                                    draws += 1
                                    result = "‡πÄ‡∏™‡∏°‡∏≠"
                            else:
                                result = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏Ç‡πà‡∏á"
                        else:
                            # ‡∏ó‡∏µ‡∏°‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°‡πÄ‡∏¢‡∏∑‡∏≠‡∏ô
                            goals_for += goals_away if goals_away else 0
                            goals_against += goals_home if goals_home else 0
                            if goals_home is not None and goals_away:
                                if goals_away > goals_home:
                                    wins += 1
                                    result = "‡∏ä‡∏ô‡∏∞"
                                elif goals_away < goals_home:
                                    losses += 1
                                    result = "‡πÅ‡∏û‡πâ"
                                else:
                                    draws += 1
                                    result = "‡πÄ‡∏™‡∏°‡∏≠"
                            else:
                                result = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏Ç‡πà‡∏á"
                        
                        results.append(f"{date}: {home} {goals_home}-{goals_away} {away} ({result})")
                    
                    return {
                        'matches': results,
                        'wins': wins,
                        'draws': draws,
                        'losses': losses,
                        'goals_for': goals_for,
                        'goals_against': goals_against,
                        'points': wins * 3 + draws
                    }
                else:
                    return None
            else:
                return None
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á 2 ‡∏ó‡∏µ‡∏°
        team1_form = get_team_form(team1_id, team1_en)
        team2_form = get_team_form(team2_id, team2_en)
        
        if not team1_form or not team2_form:
            return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ö‡∏ö HTML
        comparison = f"""
<div class="team-comparison">
    <h3>üî• ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° {count} ‡∏ô‡∏±‡∏î‡∏´‡∏•‡∏±‡∏á‡∏™‡∏∏‡∏î</h3>
    
    <table class="comparison-table">
        <thead>
            <tr>
                <th>‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥</th>
                <th>{team1_en}</th>
                <th>{team2_en}</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td><b>‡∏ä‡∏ô‡∏∞</b></td>
                <td>{team1_form['wins']}</td>
                <td>{team2_form['wins']}</td>
            </tr>
            <tr>
                <td><b>‡πÄ‡∏™‡∏°‡∏≠</b></td>
                <td>{team1_form['draws']}</td>
                <td>{team2_form['draws']}</td>
            </tr>
            <tr>
                <td><b>‡πÅ‡∏û‡πâ</b></td>
                <td>{team1_form['losses']}</td>
                <td>{team2_form['losses']}</td>
            </tr>
            <tr>
                <td><b>‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô</b></td>
                <td>{team1_form['points']} ‡πÅ‡∏ï‡πâ‡∏°</td>
                <td>{team2_form['points']} ‡πÅ‡∏ï‡πâ‡∏°</td>
            </tr>
            <tr>
                <td><b>‡πÑ‡∏î‡πâ‡∏õ‡∏£‡∏∞‡∏ï‡∏π</b></td>
                <td>{team1_form['goals_for']}</td>
                <td>{team2_form['goals_for']}</td>
            </tr>
            <tr>
                <td><b>‡πÄ‡∏™‡∏µ‡∏¢‡∏õ‡∏£‡∏∞‡∏ï‡∏π</b></td>
                <td>{team1_form['goals_against']}</td>
                <td>{team2_form['goals_against']}</td>
            </tr>
            <tr>
                <td><b>‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ï‡∏π</b></td>
                <td>{team1_form['goals_for'] - team1_form['goals_against']:+d}</td>
                <td>{team2_form['goals_for'] - team2_form['goals_against']:+d}</td>
            </tr>
        </tbody>
    </table>
    
    <div class="summary">
        <h4>üèÜ ‡∏™‡∏£‡∏∏‡∏õ:</h4>"""
    
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•
        if team1_form['points'] > team2_form['points']:
            comparison += f"<p>‚Ä¢ <b>{team1_en}</b> ‡∏°‡∏µ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ {team1_form['points'] - team2_form['points']} ‡πÅ‡∏ï‡πâ‡∏°)</p>"
        elif team2_form['points'] > team1_form['points']:
            comparison += f"<p>‚Ä¢ <b>{team2_en}</b> ‡∏°‡∏µ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ (‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ {team2_form['points'] - team1_form['points']} ‡πÅ‡∏ï‡πâ‡∏°)</p>"
        else:
            comparison += f"<p>‚Ä¢ ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏°‡∏µ‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô ({team1_form['points']} ‡πÅ‡∏ï‡πâ‡∏°)</p>"
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏õ‡∏£‡∏∞‡∏ï‡∏π
        if team1_form['goals_for'] > team2_form['goals_for']:
            comparison += f"<p>‚Ä¢ <b>{team1_en}</b> ‡∏ó‡∏≥‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ({team1_form['goals_for']} vs {team2_form['goals_for']})</p>"
        elif team2_form['goals_for'] > team1_form['goals_for']:
            comparison += f"<p>‚Ä¢ <b>{team2_en}</b> ‡∏ó‡∏≥‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ({team2_form['goals_for']} vs {team1_form['goals_for']})</p>"
        
        comparison += "</div></div>"
        
        return comparison

    def chat(self, user_message: str, page_data: str) -> str:
        query_type = self.detect_thai_query_type(user_message)
        api_result = None

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        if "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô" in user_message or "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö" in user_message:
            # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏µ‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            league_name = "‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å"  # default
            
            if any(x in user_message.lower() for x in ["‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤", "‡∏•‡∏≤‡∏•‡∏¥‡∏Å‡πâ‡∏≤", "‡∏•‡∏≤ ‡∏•‡∏µ‡∏Å‡∏≤", "‡∏™‡πÄ‡∏õ‡∏ô", "spain"]):
                league_name = "‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤"
            elif any(x in user_message.lower() for x in ["‡∏ö‡∏∏‡∏ô‡πÄ‡∏î‡∏™‡∏•‡∏µ‡∏Å‡∏≤", "‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏±‡∏ô", "germany"]):
                league_name = "‡∏ö‡∏∏‡∏ô‡πÄ‡∏î‡∏™‡∏•‡∏µ‡∏Å‡∏≤"
            elif any(x in user_message.lower() for x in ["‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢ ‡∏≠‡∏≤", "serie a", "‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ", "italy"]):
                league_name = "‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢ ‡∏≠‡∏≤"
            elif any(x in user_message.lower() for x in ["‡∏•‡∏µ‡∏Å‡πÄ‡∏≠‡∏¥‡∏á", "ligue 1", "‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™", "france"]):
                league_name = "‡∏•‡∏µ‡∏Å‡πÄ‡∏≠‡∏¥‡∏á"
            
            return self.get_standings_table(league_name)

        # ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏≤‡∏°‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡∏°
        if "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö" in user_message and not "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô" in user_message:
            # ‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏ó‡∏¢/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)
            all_team_names = list(self.team_to_league.keys())
            try:
                best_team, score, _ = process.extractOne(user_message, all_team_names, scorer=fuzz.partial_ratio)
                if score > 70:
                    league_id = self.team_to_league[best_team]
                    # ‡∏î‡∏∂‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡∏°
                    league_names = {39: "‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å", 140: "‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤", 78: "‡∏ö‡∏∏‡∏ô‡πÄ‡∏î‡∏™‡∏•‡∏µ‡∏Å‡∏≤", 135: "‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢ ‡∏≠‡∏≤", 61: "‡∏•‡∏µ‡∏Å‡πÄ‡∏≠‡∏¥‡∏á"}
                    league_name = league_names.get(league_id, "‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å")
                    
                    # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÉ‡∏´‡∏°‡πà
                    standings_html = self.get_standings_table(league_name)
                    
                    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô HTML ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                    if "standings-container" in standings_html:
                        return standings_html
                    else:
                        return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏Ç‡∏≠‡∏á {best_team} ‡πÉ‡∏ô‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ"
                else:
                    return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô"
            except Exception as e:
                return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏Ç‡πà‡∏≤‡∏ß
        if any(keyword in user_message.lower() for keyword in ["‡∏Ç‡πà‡∏≤‡∏ß", "news", "‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó", "‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏≤‡∏£", "‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"]):
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î
            team_keywords = []
            for team_name in self.thai_team_map.keys():
                if team_name in user_message:
                    team_keywords.append(team_name)
            
            if team_keywords:
                # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡∏°
                return self.get_news_by_keyword(team_keywords[0])
            else:
                # ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
                return self.get_latest_news_from_data()

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡∏°
        if any(keyword in user_message.lower() for keyword in ["‡∏ü‡∏≠‡∏£‡πå‡∏°", "form", "5 ‡∏ô‡∏±‡∏î", "‡∏ô‡∏±‡∏î‡∏´‡∏•‡∏±‡∏á"]):
            # ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            all_team_names = list(self.team_to_league.keys())
            try:
                best_team, score, _ = process.extractOne(user_message, all_team_names, scorer=fuzz.partial_ratio)
                if score > 70:
                    return self.get_last_fixtures(best_team, count=5)
                else:
                    return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏£‡∏≤‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô"
            except Exception as e:
                return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á"

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡∏°
        if any(keyword in user_message.lower() for keyword in ["‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö", "compare", "vs", "‡∏Å‡∏±‡∏ö"]):
            # ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡πÉ‡∏ô message
            teams_found = []
            for team_name in self.thai_team_map.keys():
                if team_name in user_message:
                    teams_found.append(team_name)
            
            # ‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©
            for team_name in self.thai_team_map.values():
                if team_name.lower() in user_message.lower():
                    teams_found.append(team_name)
            
            if len(teams_found) >= 2:
                return self.compare_teams_form(teams_found[0], teams_found[1], count=5)
            else:
                return "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏° 2 ‡∏ó‡∏µ‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡πÄ‡∏ä‡πà‡∏ô '‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡πÅ‡∏°‡∏ô‡∏¢‡∏π vs ‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏û‡∏π‡∏•'"

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß
        if any(keyword in user_message.lower() for keyword in ["‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß", "topscorer", "top scorer", "‡∏ô‡∏±‡∏Å‡πÄ‡∏ï‡∏∞‡∏ó‡∏≥‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î"]):
            # ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏µ‡∏Å‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            league_name = "‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å"  # default
            
            if any(x in user_message.lower() for x in ["‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤", "‡∏•‡∏≤‡∏•‡∏¥‡∏Å‡πâ‡∏≤", "‡∏•‡∏≤ ‡∏•‡∏µ‡∏Å‡∏≤", "‡∏™‡πÄ‡∏õ‡∏ô", "spain"]):
                league_name = "‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤"
            elif any(x in user_message.lower() for x in ["‡∏ö‡∏∏‡∏ô‡πÄ‡∏î‡∏™‡∏•‡∏µ‡∏Å‡∏≤", "‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏±‡∏ô", "germany"]):
                league_name = "‡∏ö‡∏∏‡∏ô‡πÄ‡∏î‡∏™‡∏•‡∏µ‡∏Å‡∏≤"
            elif any(x in user_message.lower() for x in ["‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢ ‡∏≠‡∏≤", "serie a", "‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ", "italy"]):
                league_name = "‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢ ‡∏≠‡∏≤"
            elif any(x in user_message.lower() for x in ["‡∏•‡∏µ‡∏Å‡πÄ‡∏≠‡∏¥‡∏á", "ligue 1", "‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™", "france"]):
                league_name = "‡∏•‡∏µ‡∏Å‡πÄ‡∏≠‡∏¥‡∏á"
            
            league_id = self.extract_league_id(league_name)
            return self.get_topscorers(league_id, 2024)

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ö‡∏≠‡∏•
        if any(keyword in user_message.lower() for keyword in ["‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°", "fixture", "‡∏ô‡∏±‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ", "‡πÅ‡∏Ç‡πà‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"]):
            return self.get_today_fixtures()

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏î‡πÜ ‡πÉ‡∏ä‡πâ OpenAI
        try:
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á context ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ
            context = self.build_thai_context(user_message, query_type)
            
            # ‡πÉ‡∏ä‡πâ OpenAI Client ‡πÉ‡∏´‡∏°‡πà
            client = OpenAI(api_key=self.openai_api_key)
            
            messages = [
                {"role": "system", "content": f"""‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏î‡πâ‡∏≤‡∏ô‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ
                
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ: {context}

‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢ ‡πÇ‡∏î‡∏¢‡∏≠‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏°‡∏≤ ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•
‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ñ‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏≠‡∏∑‡πà‡∏ô"""},
                {"role": "user", "content": user_message}
            ]
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI API ‡πÉ‡∏´‡∏°‡πà
            response = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=messages,
                max_tokens=1000,
                temperature=0.7
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢‡∏Ñ‡∏£‡∏±‡∏ö ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•: {str(e)}"

    def get_topscorers(self, league_id: int, season: int):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß"""
        try:
            api_key = os.getenv("API_FOOTBALL_KEY")
            if not api_key:
                api_key = "1530104cc4e15e74372196bf79eeac9e"
            
            url = f"https://v3.football.api-sports.io/players/topscorers"
            params = {
                "league": league_id,
                "season": season
            }
            headers = {"x-apisports-key": api_key}
            
            response = requests.get(url, params=params, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data["response"]:
                    html_content = """
                    <div class="topscorers-container">
                        <h2>‚öΩ ‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß</h2>
                        <table class="topscorers-table">
                            <thead>
                                <tr>
                                    <th>‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö</th>
                                    <th>‡∏ä‡∏∑‡πà‡∏≠</th>
                                    <th>‡∏ó‡∏µ‡∏°</th>
                                    <th>‡∏õ‡∏£‡∏∞‡∏ï‡∏π</th>
                                </tr>
                            </thead>
                            <tbody>
                    """
                    
                    for i, player_data in enumerate(data["response"][:10]):
                        player = player_data["player"]
                        team = player_data["statistics"][0]["team"]
                        goals = player_data["statistics"][0]["goals"]["total"]
                        
                        html_content += f"""
                        <tr>
                            <td>{i+1}</td>
                            <td>{player["name"]}</td>
                            <td>{team["name"]}</td>
                            <td>{goals}</td>
                        </tr>
                        """
                    
                    html_content += """
                            </tbody>
                        </table>
                    </div>
                    """
                    
                    return html_content
                else:
                    return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß"
            else:
                return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Status: {response.status_code})"
                
        except Exception as e:
            return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"
    
    def get_today_fixtures(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ö‡∏≠‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"""
        try:
            api_key = os.getenv("API_FOOTBALL_KEY")
            if not api_key:
                api_key = "1530104cc4e15e74372196bf79eeac9e"
            
            from datetime import datetime
            today = datetime.now().strftime("%Y-%m-%d")
            
            url = f"https://v3.football.api-sports.io/fixtures"
            params = {
                "date": today,
                "timezone": "Asia/Bangkok"
            }
            headers = {"x-apisports-key": api_key}
            
            response = requests.get(url, params=params, headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data["response"]:
                    fixtures = []
                    for fixture in data["response"][:10]:
                        time = fixture["fixture"]["date"][11:16]
                        home = fixture["teams"]["home"]["name"]
                        away = fixture["teams"]["away"]["name"]
                        league = fixture["league"]["name"]
                        
                        fixtures.append(f"{time} - {home} vs {away} ({league})")
                    
                    return f"‚öΩ ‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ö‡∏≠‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ:\n" + "\n".join(fixtures)
                else:
                    return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"
            else:
                return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
                
        except Exception as e:
            return f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}"

    def get_latest_news_from_data(self):
        """‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πå‡∏î HTML ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°"""
        try:
            news_folder = Path("data")
            if not news_folder.exists():
                return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß"
            
            # ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data
            news_files = []
            for file_path in news_folder.glob("*.txt"):
                try:
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read().strip()
                    
                    mod_time = file_path.stat().st_mtime
                    import datetime
                    mod_date = datetime.datetime.fromtimestamp(mod_time).strftime("%d/%m/%Y %H:%M")
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß
                    title = file_path.stem
                    if "__" in title:
                        title = title.split("__")[0]
                    title = title.replace("_", " ")
                    
                    news_files.append({
                        'title': title,
                        'content': content,
                        'modified': mod_time,
                        'date': mod_date,
                        'filename': file_path.name
                    })
                except Exception as e:
                    continue
            
            if not news_files:
                return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡πà‡∏≤‡∏ß‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data"
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            news_files.sort(key=lambda x: x['modified'], reverse=True)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏Ç‡πà‡∏≤‡∏ß‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
            html_content = f"""
            <div class="news-container">
                <div class="news-header">
                    <h2>üì∞ ‡∏Ç‡πà‡∏≤‡∏ß‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î</h2>
                    <p class="news-subtitle">‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å thsport.live</p>
                </div>
                
                <div class="news-grid">
            """
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πà‡∏≤‡∏ß 5 ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            for i, news in enumerate(news_files[:5]):
                # ‡∏ï‡∏±‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
                content_preview = news['content']
                if len(content_preview) > 300:
                    content_preview = content_preview[:300] + "..."
                
                # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà line breaks ‡∏î‡πâ‡∏ß‡∏¢ <br>
                content_preview = content_preview.replace('\n', '<br>')
                
                # Escape quotes ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô JavaScript
                content_escaped = news['content'].replace('"', '&quot;').replace("'", "&#39;").replace('\n', '\\n')
                
                html_content += f"""
                <div class="news-card">
                    <div class="news-card-header">
                        <div class="news-number">‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà {i+1}</div>
                        <div class="news-date">üìÖ {news['date']}</div>
                    </div>
                    
                    <div class="news-title">
                        <h3>üî• {news['title']}</h3>
                    </div>
                    
                    <div class="news-content">
                        {content_preview}
                    </div>
                    
                    <div class="news-footer">
                        <span class="news-source">üìÅ {news['filename']}</span>
                        <button class="read-more-btn" onclick="showFullNews('{news['filename']}', '{content_escaped}')">
                            ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‚Üí
                        </button>
                    </div>
                </div>
                """
            
            html_content += f"""
                </div>
                
                <div class="news-summary">
                    <div class="summary-stats">
                        <span class="stat-item">üìä ‡πÅ‡∏™‡∏î‡∏á {min(5, len(news_files))} ‡∏à‡∏≤‡∏Å {len(news_files)} ‡∏Ç‡πà‡∏≤‡∏ß</span>
                        <span class="stat-item">üîÑ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {news_files[0]['date'] if news_files else '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}</span>
                        <span class="stat-item">üì± ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å thsport.live</span>
                    </div>
                </div>
            </div>
            
            <style>
                .news-container {{
                    max-width: 1200px;
                    margin: 20px auto;
                    padding: 20px;
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                }}
                
                .news-header {{
                    text-align: center;
                    margin-bottom: 30px;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 30px;
                    border-radius: 15px;
                    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
                }}
                
                .news-header h2 {{
                    margin: 0;
                    font-size: 2.2em;
                    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                }}
                
                .news-subtitle {{
                    margin: 10px 0 0 0;
                    font-size: 1.1em;
                    opacity: 0.9;
                }}
                
                .news-grid {{
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                    gap: 25px;
                    margin-bottom: 30px;
                }}
                
                .news-card {{
                    background: white;
                    border-radius: 15px;
                    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
                    overflow: hidden;
                    transition: transform 0.3s ease, box-shadow 0.3s ease;
                    border: 1px solid #e0e0e0;
                }}
                
                .news-card:hover {{
                    transform: translateY(-8px);
                    box-shadow: 0 15px 35px rgba(0,0,0,0.15);
                }}
                
                .news-card-header {{
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 15px 20px;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }}
                
                .news-number {{
                    background: rgba(255,255,255,0.2);
                    padding: 5px 12px;
                    border-radius: 20px;
                    font-size: 0.9em;
                    font-weight: bold;
                }}
                
                .news-date {{
                    font-size: 0.9em;
                    opacity: 0.9;
                }}
                
                .news-title {{
                    padding: 20px 20px 15px 20px;
                }}
                
                .news-title h3 {{
                    margin: 0;
                    color: #333;
                    font-size: 1.3em;
                    line-height: 1.4;
                }}
                
                .news-content {{
                    padding: 0 20px 20px 20px;
                    color: #666;
                    line-height: 1.6;
                    font-size: 0.95em;
                }}
                
                .news-content mark {{
                    background: #FFD700;
                    padding: 2px 4px;
                    border-radius: 3px;
                }}
                
                .news-footer {{
                    padding: 15px 20px 20px 20px;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    border-top: 1px solid #f0f0f0;
                }}
                
                .news-source {{
                    color: #888;
                    font-size: 0.85em;
                }}
                
                .read-more-btn {{
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 20px;
                    cursor: pointer;
                    font-size: 0.85em;
                    transition: transform 0.2s ease;
                }}
                
                .read-more-btn:hover {{
                    transform: scale(1.05);
                }}
                
                .news-summary {{
                    background: #f8f9fa;
                    padding: 20px;
                    border-radius: 10px;
                    border-left: 4px solid #667eea;
                }}
                
                .summary-stats {{
                    display: flex;
                    justify-content: space-around;
                    flex-wrap: wrap;
                    gap: 15px;
                }}
                
                .stat-item {{
                    color: #666;
                    font-size: 0.9em;
                    font-weight: 500;
                }}
                
                @media (max-width: 768px) {{
                    .news-grid {{
                        grid-template-columns: 1fr;
                    }}
                    
                    .summary-stats {{
                        flex-direction: column;
                        text-align: center;
                    }}
                }}
            </style>
            
            <script>
                function showFullNews(filename, content) {{
                    const modal = document.createElement('div');
                    modal.style.cssText = `
                        position: fixed;
                        top: 0; left: 0; right: 0; bottom: 0;
                        background: rgba(0,0,0,0.8);
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        z-index: 1000;
                    `;
                    
                    const modalContent = document.createElement('div');
                    modalContent.style.cssText = `
                        background: white;
                        padding: 30px;
                        border-radius: 15px;
                        max-width: 80%;
                        max-height: 80%;
                        overflow-y: auto;
                        position: relative;
                    `;
                    
                    modalContent.innerHTML = `
                        <button onclick="this.parentElement.parentElement.remove()" 
                                style="position: absolute; top: 10px; right: 15px; 
                                       background: none; border: none; font-size: 20px; 
                                       cursor: pointer;">‚úï</button>
                        <h3>üìÑ ${{filename}}</h3>
                        <div style="line-height: 1.6; white-space: pre-wrap;">${{content}}</div>
                    `;
                    
                    modal.appendChild(modalContent);
                    document.body.appendChild(modal);
                    
                    modal.addEventListener('click', function(e) {{
                        if (e.target === modal) {{
                            modal.remove();
                        }}
                    }});
                }}
            </script>
            """
            
            return html_content
            
        except Exception as e:
            return f"<div class='error'>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß: {str(e)}</div>"

    def get_news_by_keyword(self, keyword: str):
        """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡∏≤‡∏°‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î"""
        try:
            news_folder = Path("data")
            if not news_folder.exists():
                return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πà‡∏≤‡∏ß"
            
            # ‡∏î‡∏∂‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå data
            matching_files = []
            for file_path in news_folder.glob("*.txt"):
                try:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
                    if keyword.lower() in file_path.stem.lower():
                        with open(file_path, 'r', encoding='utf-8') as f:
                            content = f.read().strip()
                        
                        mod_time = file_path.stat().st_mtime
                        import datetime
                        mod_date = datetime.datetime.fromtimestamp(mod_time).strftime("%d/%m/%Y %H:%M")
                        
                        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß
                        title = file_path.stem
                        if "__" in title:
                            title = title.split("__")[0]
                        title = title.replace("_", " ")
                        
                        matching_files.append({
                            'title': title,
                            'content': content,
                            'modified': mod_time,
                            'date': mod_date,
                            'filename': file_path.name
                        })
                        continue
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå
                    with open(file_path, 'r', encoding='utf-8') as f:
                        content = f.read().strip()
                    
                    if keyword.lower() in content.lower():
                        mod_time = file_path.stat().st_mtime
                        import datetime
                        mod_date = datetime.datetime.fromtimestamp(mod_time).strftime("%d/%m/%Y %H:%M")
                        
                        # ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Ç‡πà‡∏≤‡∏ß
                        title = file_path.stem
                        if "__" in title:
                            title = title.split("__")[0]
                        title = title.replace("_", " ")
                        
                        matching_files.append({
                            'title': title,
                            'content': content,
                            'modified': mod_time,
                            'date': mod_date,
                            'filename': file_path.name
                        })
                        
                except Exception as e:
                    continue
            
            if not matching_files:
                return f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö '{keyword}'"
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            matching_files.sort(key=lambda x: x['modified'], reverse=True)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML cards
            cards_html = ""
            for i, news in enumerate(matching_files[:10]):
                content_preview = news['content']
                if len(content_preview) > 300:
                    content_preview = content_preview[:300] + "..."
                
                content_preview = content_preview.replace('\n', '<br>')
                content_preview = content_preview.replace(keyword, f"<mark>{keyword}</mark>")
                content_escaped = news['content'].replace('"', '&quot;').replace("'", "&#39;").replace('\n', '\\n')
                
                cards_html += f"""
                <div class="news-card">
                    <div class="news-card-header">
                        <div class="news-number">‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà {i+1}</div>
                        <div class="news-date">üìÖ {news['date']}</div>
                    </div>
                    <div class="news-title">
                        <h3>üî• {news['title']}</h3>
                    </div>
                    <div class="news-content">
                        {content_preview}
                    </div>
                    <div class="news-footer">
                        <span class="news-source">üìÅ {news['filename']}</span>
                        <button class="read-more-btn" onclick="showFullNews('{news['filename']}', '{content_escaped}')">
                            ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° ‚Üí
                        </button>
                    </div>
                </div>
                """
            
            # ‡πÅ‡∏¢‡∏Å CSS ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
            css_styles = """
            <style>
                .news-container {
                    max-width: 1200px;
                    margin: 20px auto;
                    padding: 20px;
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                }
                
                .news-header {
                    text-align: center;
                    margin-bottom: 30px;
                    background: linear-gradient(135deg, #FF6B6B 0%, #FF8E53 100%);
                    color: white;
                    padding: 30px;
                    border-radius: 15px;
                    box-shadow: 0 8px 25px rgba(0,0,0,0.15);
                }
                
                .news-header h2 {
                    margin: 0;
                    font-size: 2.2em;
                    text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                }
                
                .news-subtitle {
                    margin: 10px 0 0 0;
                    font-size: 1.1em;
                    opacity: 0.9;
                }
                
                .news-grid {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                    gap: 25px;
                    margin-bottom: 30px;
                }
                
                .news-card {
                    background: white;
                    border-radius: 15px;
                    box-shadow: 0 8px 25px rgba(0,0,0,0.1);
                    overflow: hidden;
                    transition: transform 0.3s ease, box-shadow 0.3s ease;
                    border: 1px solid #e0e0e0;
                }
                
                .news-card:hover {
                    transform: translateY(-8px);
                    box-shadow: 0 15px 35px rgba(0,0,0,0.15);
                }
                
                .news-card-header {
                    background: linear-gradient(135deg, #FF6B6B 0%, #FF8E53 100%);
                    color: white;
                    padding: 15px 20px;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                }
                
                .news-number {
                    background: rgba(255,255,255,0.2);
                    padding: 5px 12px;
                    border-radius: 20px;
                    font-size: 0.9em;
                    font-weight: bold;
                }
                
                .news-date {
                    font-size: 0.9em;
                    opacity: 0.9;
                }
                
                .news-title {
                    padding: 20px 20px 15px 20px;
                }
                
                .news-title h3 {
                    margin: 0;
                    color: #333;
                    font-size: 1.3em;
                    line-height: 1.4;
                }
                
                .news-content {
                    padding: 0 20px 20px 20px;
                    color: #666;
                    line-height: 1.6;
                    font-size: 0.95em;
                }
                
                .news-content mark {
                    background: #FFD700;
                    padding: 2px 4px;
                    border-radius: 3px;
                }
                
                .news-footer {
                    padding: 15px 20px 20px 20px;
                    display: flex;
                    justify-content: space-between;
                    align-items: center;
                    border-top: 1px solid #f0f0f0;
                }
                
                .news-source {
                    color: #888;
                    font-size: 0.85em;
                }
                
                .read-more-btn {
                    background: linear-gradient(135deg, #FF6B6B 0%, #FF8E53 100%);
                    color: white;
                    border: none;
                    padding: 8px 16px;
                    border-radius: 20px;
                    cursor: pointer;
                    font-size: 0.85em;
                    transition: transform 0.2s ease;
                }
                
                .read-more-btn:hover {
                    transform: scale(1.05);
                }
                
                .news-summary {
                    background: #f8f9fa;
                    padding: 20px;
                    border-radius: 10px;
                    border-left: 4px solid #FF6B6B;
                }
                
                .summary-stats {
                    display: flex;
                    justify-content: space-around;
                    flex-wrap: wrap;
                    gap: 15px;
                }
                
                .stat-item {
                    color: #666;
                    font-size: 0.9em;
                    font-weight: 500;
                }
                
                @media (max-width: 768px) {
                    .news-grid {
                        grid-template-columns: 1fr;
                    }
                    
                    .summary-stats {
                        flex-direction: column;
                        text-align: center;
                    }
                }
            </style>
            
            <script>
                function showFullNews(filename, content) {
                    const modal = document.createElement('div');
                    modal.style.cssText = `
                        position: fixed;
                        top: 0; left: 0; right: 0; bottom: 0;
                        background: rgba(0,0,0,0.8);
                        display: flex;
                        justify-content: center;
                        align-items: center;
                        z-index: 1000;
                    `;
                    
                    const modalContent = document.createElement('div');
                    modalContent.style.cssText = `
                        background: white;
                        padding: 30px;
                        border-radius: 15px;
                        max-width: 80%;
                        max-height: 80%;
                        overflow-y: auto;
                        position: relative;
                    `;
                    
                    modalContent.innerHTML = `
                        <button onclick="this.parentElement.parentElement.remove()" 
                                style="position: absolute; top: 10px; right: 15px; 
                                       background: none; border: none; font-size: 20px; 
                                       cursor: pointer;">‚úï</button>
                        <h3>üìÑ ${{filename}}</h3>
                        <div style="line-height: 1.6; white-space: pre-wrap;">${{content}}</div>
                    `;
                    
                    modal.appendChild(modalContent);
                    document.body.appendChild(modal);
                    
                    modal.addEventListener('click', function(e) {
                        if (e.target === modal) {
                            modal.remove();
                        }
                    });
                }
            </script>
            """
            
            # ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô
            html_content = f"""
            <div class="news-container">
                <div class="news-header">
                    <h2>üîç ‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö "{keyword}"</h2>
                    <p class="news-subtitle">‡∏û‡∏ö {len(matching_files)} ‡∏Ç‡πà‡∏≤‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á</p>
                </div>
                
                <div class="news-grid">
                    {cards_html}
                </div>
                
                <div class="news-summary">
                    <div class="summary-stats">
                        <span class="stat-item">üîç ‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤: "{keyword}"</span>
                        <span class="stat-item">üìä ‡∏û‡∏ö {len(matching_files)} ‡∏Ç‡πà‡∏≤‡∏ß</span>
                        <span class="stat-item">üì± ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å thsport.live</span>
                    </div>
                </div>
            </div>
            
            {css_styles}
            """
            
            return html_content
            
        except Exception as e:
            return f"<div class='error'>‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πà‡∏≤‡∏ß: {str(e)}</div>"

@app.route('/chat', methods=['POST'])
def chat():
    try:
        data = request.json
        user_message = data.get('prompt', '')
        
        if not user_message:
            return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢"}), 400
        
        # ‡πÉ‡∏ä‡πâ chatbot object ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ
        result = chatbot.chat(user_message, "")
        
        return jsonify({"result": result})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/standings')
def api_standings():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô"""
    league = request.args.get('league', '‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å')
    
    try:
        result = chatbot.get_standings_table(league)
        return jsonify({"result": result})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/topscorers')
def api_topscorers():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß"""
    league = request.args.get('league', '‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å')
    
    try:
        league_id = chatbot.extract_league_id(league)
        result = chatbot.get_topscorers(league_id, 2024)
        return jsonify({"result": result})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/team-form')
def api_team_form():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏µ‡∏°"""
    team = request.args.get('team', '')
    
    if not team:
        return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡∏° ‡πÄ‡∏ä‡πà‡∏ô ?team=‡πÅ‡∏°‡∏ô‡∏¢‡∏π"}), 400
    
    try:
        result = chatbot.get_last_fixtures(team, count=5)
        return jsonify({"result": result})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/compare-teams')
def api_compare_teams():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ó‡∏µ‡∏°"""
    team1 = request.args.get('team1', '')
    team2 = request.args.get('team2', '')
    
    if not team1 or not team2:
        return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏ó‡∏µ‡∏° 2 ‡∏ó‡∏µ‡∏° ‡πÄ‡∏ä‡πà‡∏ô ?team1=‡πÅ‡∏°‡∏ô‡∏¢‡∏π&team2=‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏û‡∏π‡∏•"}), 400
    
    try:
        result = chatbot.compare_teams_form(team1, team2, count=5)
        return jsonify({"result": result})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/last-results')
def api_last_results():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏ú‡∏•‡∏ö‡∏≠‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
    try:
        fixtures = chatbot.get_today_fixtures()
        if fixtures:
            return jsonify({"results": fixtures})
        else:
            return jsonify({"results": ["‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏•‡∏ö‡∏≠‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"]})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/news')
def api_news():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏Ç‡πà‡∏≤‡∏ß‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•"""
    keyword = request.args.get('keyword', '')
    
    try:
        if keyword:
            result = chatbot.get_news_by_keyword(keyword)
        else:
            result = chatbot.get_latest_news_from_data()
        
        return jsonify({"result": result})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/news/latest')
def api_latest_news():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î"""
    try:
        result = chatbot.get_latest_news_from_data()
        return jsonify({"result": result})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/news/search')
def api_search_news():
    """API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß"""
    keyword = request.args.get('q', '')
    
    if not keyword:
        return jsonify({"error": "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ?q=‡πÅ‡∏°‡∏ô‡∏¢‡∏π"}), 400
    
    try:
        result = chatbot.get_news_by_keyword(keyword)
        return jsonify({"result": result})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/')
def index():
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>‚öΩ ‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏• Chatbot</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <style>
            body { 
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; 
                margin: 0; 
                padding: 20px; 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                min-height: 100vh;
            }
            .container {
                max-width: 1200px;
                margin: 0 auto;
                background: rgba(255,255,255,0.1);
                backdrop-filter: blur(10px);
                border-radius: 20px;
                padding: 30px;
                box-shadow: 0 8px 32px rgba(0,0,0,0.3);
            }
            h1 {
                text-align: center;
                font-size: 2.5em;
                margin-bottom: 10px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }
            .subtitle {
                text-align: center;
                font-size: 1.2em;
                margin-bottom: 30px;
                opacity: 0.9;
            }
            .api-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                gap: 20px;
                margin: 30px 0;
            }
            .api-card {
                background: rgba(255,255,255,0.15);
                border-radius: 15px;
                padding: 20px;
                transition: transform 0.3s ease, box-shadow 0.3s ease;
                border: 1px solid rgba(255,255,255,0.2);
            }
            .api-card:hover {
                transform: translateY(-5px);
                box-shadow: 0 10px 25px rgba(0,0,0,0.2);
            }
            .method {
                display: inline-block;
                padding: 4px 8px;
                border-radius: 6px;
                font-size: 0.8em;
                font-weight: bold;
                margin-right: 10px;
            }
            .post { background: #28a745; }
            .get { background: #17a2b8; }
            .endpoint {
                font-family: 'Courier New', monospace;
                color: #ffd700;
                word-break: break-all;
                margin: 8px 0;
            }
            .description {
                color: #e0e0e0;
                font-size: 0.9em;
                margin-top: 10px;
            }
            .examples {
                background: rgba(0,0,0,0.2);
                border-radius: 10px;
                padding: 20px;
                margin: 20px 0;
            }
            .example-item {
                margin: 8px 0;
                padding: 8px;
                background: rgba(255,255,255,0.1);
                border-radius: 6px;
                border-left: 4px solid #ffd700;
            }
            .status {
                background: rgba(40, 167, 69, 0.2);
                border-radius: 10px;
                padding: 20px;
                margin: 20px 0;
                border: 1px solid rgba(40, 167, 69, 0.3);
            }
            .status h4 {
                color: #28a745;
                margin-top: 0;
            }
            .emoji {
                font-size: 1.2em;
                margin-right: 8px;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>‚öΩ ‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏• Chatbot API</h1>
            <div class="subtitle">
                üöÄ ‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å thsport.live
            </div>
            
            <div class="api-grid">
                <div class="api-card">
                    <span class="method post">POST</span>
                    <div class="endpoint">/chat</div>
                    <div class="description">
                        <span class="emoji">üí¨</span>
                        Chat ‡∏Å‡∏±‡∏ö AI ‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞<br>
                        <small>Body: {"prompt": "‡∏Ç‡πà‡∏≤‡∏ß‡∏ö‡∏≠‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ"}</small>
                    </div>
                </div>
                
                <div class="api-card">
                    <span class="method get">GET</span>
                    <div class="endpoint">/api/news/latest</div>
                    <div class="description">
                        <span class="emoji">üì∞</span>
                        ‡∏Ç‡πà‡∏≤‡∏ß‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°)
                    </div>
                </div>
                
                <div class="api-card">
                    <span class="method get">GET</span>
                    <div class="endpoint">/api/news/search?q=‡πÅ‡∏°‡∏ô‡∏¢‡∏π</div>
                    <div class="description">
                        <span class="emoji">üîç</span>
                        ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πà‡∏≤‡∏ß‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡∏°/‡∏Ñ‡∏µ‡∏¢‡πå‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏î
                    </div>
                </div>
                
                <div class="api-card">
                    <span class="method get">GET</span>
                    <div class="endpoint">/api/standings?league=‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å</div>
                    <div class="description">
                        <span class="emoji">üèÜ</span>
                        ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÅ‡∏ö‡∏ö Real-time
                    </div>
                </div>
                
                <div class="api-card">
                    <span class="method get">GET</span>
                    <div class="endpoint">/api/topscorers?league=‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å</div>
                    <div class="description">
                        <span class="emoji">‚öΩ</span>
                        ‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏•‡∏µ‡∏Å
                    </div>
                </div>
                
                <div class="api-card">
                    <span class="method get">GET</span>
                    <div class="endpoint">/api/team-form?team=‡πÅ‡∏°‡∏ô‡∏¢‡∏π</div>
                    <div class="description">
                        <span class="emoji">üìä</span>
                        ‡∏ü‡∏≠‡∏£‡πå‡∏° 5 ‡∏ô‡∏±‡∏î‡∏´‡∏•‡∏±‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°
                    </div>
                </div>
                
                <div class="api-card">
                    <span class="method get">GET</span>
                    <div class="endpoint">/api/compare-teams?team1=‡πÅ‡∏°‡∏ô‡∏¢‡∏π&team2=‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏û‡∏π‡∏•</div>
                    <div class="description">
                        <span class="emoji">üî•</span>
                        ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 2 ‡∏ó‡∏µ‡∏°
                    </div>
                </div>
                
                <div class="api-card">
                    <span class="method get">GET</span>
                    <div class="endpoint">/api/last-results</div>
                    <div class="description">
                        <span class="emoji">üìà</span>
                        ‡∏ú‡∏•‡∏ö‡∏≠‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î/‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                    </div>
                </div>
            </div>
            
            <h3>üî• ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:</h3>
            <div class="examples">
                <div class="example-item">
                    <b>‡∏ñ‡∏≤‡∏°:</b> "‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß ‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å" <br>
                    <b>‡∏ï‡∏≠‡∏ö:</b> ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏à‡∏≤‡∏Å API ‡∏à‡∏£‡∏¥‡∏á
                </div>
                <div class="example-item">
                    <b>‡∏ñ‡∏≤‡∏°:</b> "‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤" <br>
                    <b>‡∏ï‡∏≠‡∏ö:</b> ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å API
                </div>
                <div class="example-item">
                    <b>‡∏ñ‡∏≤‡∏°:</b> "‡∏ü‡∏≠‡∏£‡πå‡∏° 5 ‡∏ô‡∏±‡∏î ‡πÅ‡∏°‡∏ô‡∏¢‡∏π" <br>
                    <b>‡∏ï‡∏≠‡∏ö:</b> ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏á‡∏≤‡∏ô 5 ‡∏ô‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡∏ô‡∏¢‡∏π
                </div>
                <div class="example-item">
                    <b>‡∏ñ‡∏≤‡∏°:</b> "‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡πÅ‡∏°‡∏ô‡∏¢‡∏π vs ‡∏•‡∏¥‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏û‡∏π‡∏•" <br>
                    <b>‡∏ï‡∏≠‡∏ö:</b> ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ü‡∏≠‡∏£‡πå‡∏° 2 ‡∏ó‡∏µ‡∏°
                </div>
                <div class="example-item">
                    <b>‡∏ñ‡∏≤‡∏°:</b> "‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö ‡πÅ‡∏°‡∏ô‡∏ã‡∏¥‡∏ï‡∏µ‡πâ" <br>
                    <b>‡∏ï‡∏≠‡∏ö:</b> ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏°‡∏ô‡∏ã‡∏¥‡∏ï‡∏µ‡πâ
                </div>
                <div class="example-item">
                    <b>‡∏ñ‡∏≤‡∏°:</b> "‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ö‡∏≠‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" <br>
                    <b>‡∏ï‡∏≠‡∏ö:</b> ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Ç‡πà‡∏á‡∏Ç‡∏±‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                </div>
                <div class="example-item">
                    <b>‡∏ñ‡∏≤‡∏°:</b> "‡∏Ç‡πà‡∏≤‡∏ß‡∏ö‡∏≠‡∏•‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" <br>
                    <b>‡∏ï‡∏≠‡∏ö:</b> ‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏Ç‡πà‡∏≤‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå data
                </div>
            </div>
            
            <div class="status">
                <h4>‚úÖ ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏∞‡∏ö‡∏ö:</h4>
                <p>‚Ä¢ API-Football: ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ (‡∏°‡∏µ API Key)</p>
                <p>‚Ä¢ OpenAI: ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ (‡∏°‡∏µ API Key)</p>
                <p>‚Ä¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß</p>
                <p>‚Ä¢ ‡∏£‡∏∞‡∏ö‡∏ö Chat: ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô</p>
                <p>‚Ä¢ ‡∏Ç‡πà‡∏≤‡∏ß‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•: ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå data</p>
            </div>
    </body>
    </html>
    """

def main():
    global chatbot
    try:
        print("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö API Keys
        print("üîë ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Keys:")
        openai_key = os.getenv("OPENAI_API_KEY")
        football_key = os.getenv("API_FOOTBALL_KEY")
        
        if not openai_key:
            print("‚ùå OPENAI_API_KEY ‡πÑ‡∏°‡πà‡∏û‡∏ö")
            return
        if not football_key:
            print("‚ùå API_FOOTBALL_KEY ‡πÑ‡∏°‡πà‡∏û‡∏ö")
            return
            
        print("‚úÖ API Keys ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á chatbot object
        chatbot = ThaiFootballAnalysisChatbot(
            openai_api_key=openai_key,
            reference_folder="data"
        )
        
        if not chatbot.reference_data:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£ ‡∏ú‡∏°‡∏¢‡∏±‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏∏‡∏¢‡∏ü‡∏∏‡∏ï‡∏ö‡∏≠‡∏•‡∏Å‡∏±‡∏ö‡∏Ñ‡∏∏‡∏ì!")
        else:
            categories = {}
            for data in chatbot.reference_data.values():
                cat = data['type']
                categories[cat] = categories.get(cat, 0) + 1
            print("üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡∏°‡∏°‡∏µ:")
            for category, count in categories.items():
                print(f"  - {category}: {count} ‡πÑ‡∏ü‡∏•‡πå")
        
        print("üöÄ ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
        print("üì° URL: http://localhost:5000")
        print("üî¥ ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå")
        
        # ‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß")
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()

# ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ global
chatbot = None

if __name__ == "__main__":
    main()