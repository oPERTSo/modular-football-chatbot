#!/usr/bin/env python3
"""
Test script specifically for topscorer functionality with fuzzy matching
"""

import sys
from pathlib import Path
sys.path.append(str(Path(__file__).parent))

from modules.thai_football_bot import ThaiFootballAnalysisChatbot

def test_topscorer_fuzzy_matching():
    """Test topscorer queries with fuzzy matching"""
    print("‚öΩ Testing Topscorer Queries with Fuzzy Matching")
    print("=" * 60)
    
    chatbot = ThaiFootballAnalysisChatbot()
    
    # Test various topscorer queries with different league name formats
    test_queries = [
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å", "Premier League topscorer - exact Thai"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢", "Premier League topscorer - short Thai"),
        ("top scorers premier league", "Premier League topscorer - English"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", "Premier League topscorer - country Thai"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤", "La Liga topscorer - exact Thai"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏•‡∏≤‡∏•‡∏¥‡∏Å‡∏≤", "La Liga topscorer - typo Thai"),
        ("top scorers la liga", "La Liga topscorer - English"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏™‡πÄ‡∏õ‡∏ô", "La Liga topscorer - country Thai"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏ö‡∏∏‡∏ô‡πÄ‡∏î‡∏™‡∏•‡∏µ‡∏Å‡∏≤", "Bundesliga topscorer - exact Thai"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏ö‡∏∏‡∏ô‡πÄ‡∏î‡∏™", "Bundesliga topscorer - short Thai"),
        ("top scorers bundesliga", "Bundesliga topscorer - English"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏±‡∏ô", "Bundesliga topscorer - country Thai"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢‡∏≠‡∏≤", "Serie A topscorer - exact Thai"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢", "Serie A topscorer - short Thai"),
        ("top scorers serie a", "Serie A topscorer - English"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ", "Serie A topscorer - country Thai"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏•‡∏µ‡∏Å‡πÄ‡∏≠‡∏¥‡∏á", "Ligue 1 topscorer - exact Thai"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏•‡∏µ‡∏Å 1", "Ligue 1 topscorer - alt Thai"),
        ("top scorers ligue 1", "Ligue 1 topscorer - English"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™", "Ligue 1 topscorer - country Thai"),
        
        # Mixed language queries
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß premier league", "Mixed - Thai + English"),
        ("top scorers ‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤", "Mixed - English + Thai"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß bundesliga", "Mixed - Thai + English"),
        ("top scorers ‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢", "Mixed - English + Thai"),
        
        # Very casual queries
        ("‡πÉ‡∏Ñ‡∏£‡∏¢‡∏¥‡∏á‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå", "Who scored most - Premier League"),
        ("‡πÉ‡∏Ñ‡∏£‡∏¢‡∏¥‡∏á‡πÄ‡∏Å‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤", "Who scored best - La Liga"),
        ("‡πÉ‡∏Ñ‡∏£‡∏ó‡∏≥‡∏õ‡∏£‡∏∞‡∏ï‡∏π‡πÄ‡∏¢‡∏≠‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏ö‡∏∏‡∏ô‡πÄ‡∏î‡∏™", "Who scored most - Bundesliga"),
        ("‡πÉ‡∏Ñ‡∏£‡πÄ‡∏à‡πã‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢‡∏≠‡∏≤", "Who is best - Serie A"),
        ("‡πÉ‡∏Ñ‡∏£‡πÄ‡∏Å‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏•‡∏µ‡∏Å‡πÄ‡∏≠‡∏¥‡∏á", "Who is best - Ligue 1"),
        
        # Questions with typos
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏•‡∏µ‡∏Ñ", "Topscorer - Premier League typo"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏•‡∏≤‡∏•‡∏¥‡∏Ñ", "Topscorer - La Liga typo"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏ö‡∏±‡∏ô‡πÄ‡∏î‡∏™", "Topscorer - Bundesliga typo"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢‡∏∞", "Topscorer - Serie A typo"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏•‡∏µ‡∏Ñ‡πÄ‡∏≠‡∏¥‡∏á", "Topscorer - Ligue 1 typo"),
    ]
    
    print(f"Testing {len(test_queries)} topscorer queries...")
    print()
    
    success_count = 0
    total_count = len(test_queries)
    
    for i, (query, description) in enumerate(test_queries, 1):
        print(f"Test {i:2d}: {description}")
        print(f"         Query: '{query}'")
        
        try:
            # Test if the query contains topscorer-related keywords
            topscorer_keywords = ["‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß", "top scorer", "top scorers", "‡∏¢‡∏¥‡∏á", "‡∏õ‡∏£‡∏∞‡∏ï‡∏π", "‡πÄ‡∏à‡πã‡∏á", "‡πÄ‡∏Å‡πà‡∏á"]
            contains_topscorer = any(keyword in query.lower() for keyword in topscorer_keywords)
            
            if contains_topscorer:
                # Extract league name from query
                league_id = chatbot.extract_league_id(query)
                league_names = {
                    39: "‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å",
                    140: "‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤", 
                    78: "‡∏ö‡∏∏‡∏ô‡πÄ‡∏î‡∏™‡∏•‡∏µ‡∏Å‡∏≤",
                    135: "‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢ ‡∏≠‡∏≤",
                    61: "‡∏•‡∏µ‡∏Å‡πÄ‡∏≠‡∏¥‡∏á",
                }
                
                detected_league = league_names.get(league_id, "Unknown")
                print(f"         üéØ Detected league: {detected_league} (ID: {league_id})")
                
                # Test the topscorer function
                result = chatbot.get_topscorers_table(query)
                
                if result and "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" not in result and "‡∏Ç‡∏≠‡∏≠‡∏†‡∏±‡∏¢" not in result:
                    print(f"         ‚úÖ PASS: Successfully got topscorer data")
                    success_count += 1
                else:
                    print(f"         ‚ö†Ô∏è  PARTIAL: Query processed but no data returned")
                    print(f"         Result: {result[:100]}...")
                    success_count += 0.5  # Partial success
                    
            else:
                print(f"         ‚ùå FAIL: Query doesn't contain topscorer keywords")
                
        except Exception as e:
            print(f"         üí• ERROR: {e}")
            
        print()
    
    print("=" * 60)
    print(f"TOPSCORER SUMMARY: {success_count}/{total_count} tests passed ({success_count/total_count*100:.1f}%)")
    print("=" * 60)

def test_league_detection_accuracy():
    """Test how accurately we can detect leagues from various inputs"""
    print("\nüéØ Testing League Detection Accuracy")
    print("=" * 60)
    
    chatbot = ThaiFootballAnalysisChatbot()
    
    # Test cases with expected league IDs
    test_cases = [
        # Clear cases
        ("‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å", 39, "Premier League"),
        ("‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤", 140, "La Liga"),
        ("‡∏ö‡∏∏‡∏ô‡πÄ‡∏î‡∏™‡∏•‡∏µ‡∏Å‡∏≤", 78, "Bundesliga"),
        ("‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢ ‡∏≠‡∏≤", 135, "Serie A"),
        ("‡∏•‡∏µ‡∏Å‡πÄ‡∏≠‡∏¥‡∏á", 61, "Ligue 1"),
        
        # Country names
        ("‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", 39, "England -> Premier League"),
        ("‡∏™‡πÄ‡∏õ‡∏ô", 140, "Spain -> La Liga"),
        ("‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏±‡∏ô", 78, "Germany -> Bundesliga"),
        ("‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ", 135, "Italy -> Serie A"),
        ("‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™", 61, "France -> Ligue 1"),
        
        # English names
        ("premier league", 39, "Premier League English"),
        ("la liga", 140, "La Liga English"),
        ("bundesliga", 78, "Bundesliga English"),
        ("serie a", 135, "Serie A English"),
        ("ligue 1", 61, "Ligue 1 English"),
        
        # Abbreviations
        ("epl", 39, "EPL -> Premier League"),
        ("pl", 39, "PL -> Premier League"),
        ("ll", 140, "LL -> La Liga"),
        ("bl", 78, "BL -> Bundesliga"),
        ("sa", 135, "SA -> Serie A"),
        ("l1", 61, "L1 -> Ligue 1"),
        
        # Mixed with other words
        ("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å", 39, "Standings Premier League"),
        ("‡∏î‡∏≤‡∏ß‡∏ã‡∏±‡∏•‡πÇ‡∏ß‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤", 140, "Topscorer La Liga"),
        ("‡∏ú‡∏•‡∏ö‡∏≠‡∏•‡∏ö‡∏∏‡∏ô‡πÄ‡∏î‡∏™‡∏•‡∏µ‡∏Å‡∏≤", 78, "Results Bundesliga"),
        ("‡∏Ç‡πà‡∏≤‡∏ß‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢‡∏≠‡∏≤", 135, "News Serie A"),
        ("‡πÅ‡∏ä‡∏°‡∏õ‡πå‡∏•‡∏µ‡∏Å‡πÄ‡∏≠‡∏¥‡∏á", 61, "Champion Ligue 1"),
        
        # Challenging cases
        ("‡∏û‡∏£‡∏µ‡πÄ‡∏°‡∏µ‡∏¢‡∏£‡πå‡∏•‡∏µ‡∏Å‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©", 39, "Premier League England"),
        ("‡∏•‡∏≤‡∏•‡∏µ‡∏Å‡∏≤‡∏™‡πÄ‡∏õ‡∏ô", 140, "La Liga Spain"),
        ("‡∏ö‡∏∏‡∏ô‡πÄ‡∏î‡∏™‡∏•‡∏µ‡∏Å‡∏≤‡πÄ‡∏¢‡∏≠‡∏£‡∏°‡∏±‡∏ô", 78, "Bundesliga Germany"),
        ("‡πÄ‡∏ã‡πÄ‡∏£‡∏µ‡∏¢‡∏≠‡∏≤‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ", 135, "Serie A Italy"),
        ("‡∏•‡∏µ‡∏Å‡πÄ‡∏≠‡∏¥‡∏á‡∏ù‡∏£‡∏±‡πà‡∏á‡πÄ‡∏®‡∏™", 61, "Ligue 1 France"),
    ]
    
    print(f"Testing {len(test_cases)} league detection cases...")
    print()
    
    success_count = 0
    total_count = len(test_cases)
    
    for i, (input_text, expected_id, description) in enumerate(test_cases, 1):
        print(f"Test {i:2d}: {description}")
        print(f"         Input: '{input_text}'")
        
        try:
            result_id = chatbot.extract_league_id(input_text)
            success = result_id == expected_id
            
            if success:
                print(f"         ‚úÖ PASS: Detected league ID {result_id}")
                success_count += 1
            else:
                print(f"         ‚ùå FAIL: Got {result_id}, expected {expected_id}")
                
        except Exception as e:
            print(f"         üí• ERROR: {e}")
            
        print()
    
    print("=" * 60)
    print(f"DETECTION SUMMARY: {success_count}/{total_count} tests passed ({success_count/total_count*100:.1f}%)")
    print("=" * 60)

if __name__ == "__main__":
    print("üöÄ Starting Topscorer Fuzzy Matching Tests")
    print("=" * 60)
    
    try:
        test_league_detection_accuracy()
        test_topscorer_fuzzy_matching()
        
        print("\n‚úÖ All topscorer fuzzy matching tests completed!")
        
    except Exception as e:
        print(f"\nüí• Test failed with error: {e}")
        import traceback
        traceback.print_exc()
